{"version":3,"sources":["ApplicationServices.js","Company/CompanyApplicationService.js","Survey/SurveyApplicationService.js","DatabaseServices.js","Breeze/breezeservice.js","Breeze/metadata.js","Company/CompanyService.js","CompanyUser/CompanyUserService.js","Customer/CustomerService.js","Image/ImageService.js","Location/LocationService.js","Product/ProductService.js","Question/QuestionService.js","Report/ReportService.js","Role/RoleService.js","Survey/SurveyService.js","SurveyCustomerLocation/SurveyCustomerLocationService.js","SurveyDetail/SurveyDetailService.js","SurveyHeader/SurveyHeaderService.js","SurveyProductQuestion/SurveyProductQuestionService.js","User/UserService.js","UserRole/UserRoleService.js","App.js","MainController.js","CompanyAddEditController.js","CompanyController.js","Customer/Controllers/CustomerAddEditController.js","Customer/Controllers/CustomerController.js","Location/Controllers/LocationAddEditController.js","Location/Controllers/LocationController.js","Product/Controllers/ProductAddEditController.js","Product/Controllers/ProductController.js","Question/Controllers/QuestionAddEditController.js","Question/Controllers/QuestionController.js","Survey/Controllers/SurveyAddEditController.js","Survey/Controllers/SurveyController.js","SurveyCustomerLocation/Controllers/SurveyCustomerLocationAddEditController.js","SurveyCustomerLocation/Controllers/SurveyCustomerLocationController.js","SurveyProductQuestion/Controllers/SurveyProductQuestionAddEditController.js","SurveyProductQuestion/Controllers/SurveyProductQuestionController.js","UserRole/Controllers/UserRoleAddEditController.js","UserRole/Controllers/UserRoleController.js","CustomerLocation/MerchandiseCustomerLocationController.js","Survey/MerchandiseSurveyController.js","SurveyData/MerchandiseSurveyData.js","Main/ReportMainController.js"],"names":["angular","module","service","observers","this","RegisterObserver","callback","push","NotifyObservers","forEach","SelectedCompany","GetSelectedCompany","SetSelectedCompany","company","SelectedSurvey","SetSelectedSurvey","survey","$http","$q","$timeout","breeze","executeQuery","query","manager","then","data","all","EntityQuery","from","resourceName","serviceName","dataService","DataService","hasServerMetadata","metadataStore","MetadataStore","importMetadata","window","metadata","EntityManager","meta","setEntityTypeForResourceName","factory","JSON","stringify","schema","namespace","alias","annotation:UseStrongSpatialTypes","xmlns:annotation","xmlns:customannotation","xmlns","cSpaceOSpaceMapping","entityType","name","customannotation:ClrType","key","propertyRef","property","type","nullable","maxLength","fixedLength","unicode","navigationProperty","relationship","fromRole","toRole","association","end","role","multiplicity","onDelete","action","referentialConstraint","principal","dependent","entityContainer","customannotation:UseClrTypes","entitySet","associationSet","breezeservice","_self","deferredRequest","Search","predicate","page","pageSize","cancelExistingSearch","reject","deferred","defer","where","orderByDesc","skip","take","resolve","httpResponse","msg","code","promise","SearchJson","orderBy","Get","id","method","url","success","status","headers","config","error","Create","item","post","response","statusText","length","Update","put","Delete","delete","GetBeforeImage","GetAfterImage","CreateBeforeImage","image","undefined","CreateAfterImage","DeleteBeforeImage","DeleteAfterImage","CreateBulk","UpdateBulk","DeleteBulk","GetCurrentUser","app","blockUIConfig","delay","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","moment","controller","$scope","$state","CompanyApplicationService","SurveyApplicationService","Route","go","toastr","$stateParams","$routeParams","$location","CompanyService","Init","Id","Name","Save","$parent","alert","p1","Predicate","p2","and","items","Edit","reload","Select","CustomerService","CompanyId","LocationService","ProductService","QuestionService","SurveyService","SurveyCustomerLocationService","SearchCustomers","value","SelectCustomer","model","label","CustomerId","SearchLocations","SelectLocation","LocationId","SurveyId","SurveyProductQuestionService","SearchProducts","SelectProduct","ProductId","SearchQuestions","SelectQuestion","QuestionId","UserRoleService","RoleService","Roles","Customers","Validate","RoleId","Role","Customer","UserService","SelectedLocation","SelectedCustomer","UserId","==","companies","map","e","in","Company","SelectCompany","LocationSearch","companyId","Location","CustomerSearch","locationId","SurveySearch","customerId","p3","Survey","SelectSurvey","surveyId","SurveyHeaderService","SurveyDetailService","ImageService","BeforeImage","AfterImage","Header","Latitude","Longitude","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Detail","surveyHeaderId","setBeforeImage","element","reader","FileReader","files","onload","event","target","result","$apply","readAsDataURL","setAfterImage","promises","details","Answer","Details","Product","Question","fileSizeBeforeImage","fileSizeAfterImage","size","document","querySelector","empty","uiGridConstants","grid","options","showGridFooter","enableFiltering","enableSorting","headerTooltip","onRegisterApi","gridApi","enableGridMenu","exporterCsvFilename","exporterPdfOrientation","exporterPdfPageSize","exporterPdfMaxGridWidth","columnDefs","field","displayName","width","cellTemplate","ReportService","gridOptions","keys","obj","includes","cellTooltip","row","index","indexOf","splice"],"mappings":"CACA,WACA,YACAA,SAAAC,OAAA,6BCHAD,QAAAC,OAAA,uBAAAC,QAAA,4BAAA,WAEA,GAAAC,KACAC,MAAAC,iBAAA,SAAAC,GACAH,EAAAI,KAAAD,IAGAF,KAAAI,gBAAA,WACAR,QAAAS,QAAAN,EAAA,SAAAG,GACAA,OAIAF,KAAAM,gBAAA,KACAN,KAAAO,mBAAA,WACA,MAAAD,kBAGAN,KAAAQ,mBAAA,SAAAC,GACAT,KAAAM,gBAAAG,EACAT,KAAAI,qBCpBAR,QAAAC,OAAA,uBAAAC,QAAA,2BAAA,WAEA,GAAAC,KACAC,MAAAC,iBAAA,SAAAC,GACAH,EAAAI,KAAAD,IAGAF,KAAAI,gBAAA,WACAR,QAAAS,QAAAN,EAAA,SAAAG,GACAA,OAIAF,KAAAU,eAAA,KACAV,KAAAO,mBAAA,WACA,MAAAG,iBAGAV,KAAAW,kBAAA,SAAAC,GACAZ,KAAAU,eAAAE,EACAZ,KAAAI,qBCnBA,WACA,YACAR,SAAAC,OAAA,0BCHA,WAKA,QAAAC,GAAAe,EAAAC,EAAAC,EAAAC,GA4BA,QAAAC,GAAAC,GACA,MAAAC,GAAAF,aAAAC,GAAAE,KAAA,SAAAC,GACA,MAAAA,KAIA,QAAAC,KACA,GAAAJ,GAAAF,EAAAO,YACAC,KAAAC,aAEA,OAAAR,GAAAC,GArCA,GAAAQ,GAAA,UACAC,EAAA,GAAAX,GAAAY,aACAF,YAAAA,EACAG,mBAAA,IAEAC,EAAA,GAAAd,GAAAe,aAEAD,GAAAE,eAAAC,OAAAjB,OAAAkB,SAEA,IAAAf,GAAA,GAAAH,GAAAmB,eACAR,YAAAA,EACAG,cAAAA,IAEAM,EAAAjB,EAAAW,aACAM,GAAAC,6BAAA,qBAAA,qBAKAD,EAAAC,6BAAA,oBAAA,oBACAD,EAAAC,6BAAA,iBAAA,gBACA,IAAAvC,IACAmB,aAAAA,EACAK,IAAAA,EAEA,OAAAxB,GA7BAF,QAAAC,OAAA,oBAAAyC,QAAA,iBACA,QAAA,KAAA,WAAA,SAAAxC,OCHAmC,OAAAjB,OAAAiB,OAAAjB,WAAAiB,OAAAjB,OAAAkB,SAAAK,KAAAC,WACAC,QAAAC,UAAA,eAAAC,MAAA,OAAAC,mCAAA,QAAAC,mBAAA,0DAAAC,yBAAA,gEAAAC,MAAA,+CAAAC,oBAAA,yWAAAC,aAAAC,KAAA,mBAAAC,2BAAA,4GAAAC,KAAAC,aAAAH,KAAA,OAAAI,WAAAJ,KAAA,KAAAK,KAAA,WAAAC,SAAA,UAAAN,KAAA,OAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,SAAAT,KAAA,UAAAK,KAAA,eAAAC,SAAA,UAAAN,KAAA,YAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,SAAAT,KAAA,aAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,WAAAT,KAAA,gBAAAC,2BAAA,yGAAAC,KAAAC,aAAAH,KAAA,OAAAI,WAAAJ,KAAA,KAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,OAAAH,SAAA,UAAAN,KAAA,OAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,WAAAT,KAAA,oBAAAC,2BAAA,6GAAAC,KAAAC,aAAAH,KAAA,OAAAI,WAAAJ,KAAA,KAAAK,KAAA,WAAAC,SAAA,UAAAN,KAAA,SAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,SAAAT,KAAA,SAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,SAAAT,KAAA,YAAAK,KAAA,WAAAC,SAAA,UAAAN,KAAA,aAAAK,KAAA,aAAAK,qBAAAV,KAAA,UAAAW,aAAA,iCAAAC,SAAA,mCAAAC,OAAA,qCAAAb,KAAA,WAAAW,aAAA,kCAAAC,SAAA,oCAAAC,OAAA,sCAAAb,KAAA,OAAAW,aAAA,8BAAAC,SAAA,gCAAAC,OAAA,kCAAAb,KAAA,OAAAW,aAAA,8BAAAC,SAAA,gCAAAC,OAAA,oCAAAb,KAAA,oBAAAC,2BAAA,6GAAAC,KAAAC,aAAAH,KAAA,OAAAI,WAAAJ,KAAA,KAAAK,KAAA,WAAAC,SAAA,UAAAN,KAAA,YAAAK,KAAA,WAAAC,SAAA,UAAAN,KAAA,OAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,SAAAT,KAAA,UAAAK,KAAA,eAAAC,SAAA,UAAAN,KAAA,YAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,SAAAT,KAAA,aAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,WAAAT,KAAA,gBAAAC,2BAAA,yGAAAC,KAAAC,aAAAH,KAAA,OAAAI,WAAAJ,KAAA,KAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,OAAAH,SAAA,UAAAN,KAAA,WAAAK,KAAA,aAAAE,UAAA,MAAAC,YAAA,QAAAC,QAAA,WAAAK,cAAAd,KAAA,4BAAAe,MAAAC,KAAA,mCAAAX,KAAA,6BAAAY,aAAA,MAAAD,KAAA,mCAAAX,KAAA,4BAAAY,aAAA,IAAAC,UAAAC,OAAA,aAAAC,uBAAAC,WAAAL,KAAA,mCAAAb,aAAAH,KAAA,OAAAsB,WAAAN,KAAA,mCAAAb,aAAAH,KAAA,iBAAAA,KAAA,6BAAAe,MAAAC,KAAA,oCAAAX,KAAA,6BAAAY,aAAA,MAAAD,KAAA,oCAAAX,KAAA,6BAAAY,aAAA,SAAAG,uBAAAC,WAAAL,KAAA,oCAAAb,aAAAH,KAAA,OAAAsB,WAAAN,KAAA,oCAAAb,aAAAH,KAAA,kBAAAA,KAAA,yBAAAe,MAAAC,KAAA,gCAAAX,KAAA,6BAAAY,aAAA,MAAAD,KAAA,gCAAAX,KAAA,yBAAAY,aAAA,SAAAG,uBAAAC,WAAAL,KAAA,gCAAAb,aAAAH,KAAA,OAAAsB,WAAAN,KAAA,gCAAAb,aAAAH,KAAA,cAAAA,KAAA,yBAAAe,MAAAC,KAAA,gCAAAX,KAAA,6BAAAY,aAAA,MAAAD,KAAA,gCAAAX,KAAA,yBAAAY,aAAA,SAAAG,uBAAAC,WAAAL,KAAA,gCAAAb,aAAAH,KAAA,OAAAsB,WAAAN,KAAA,gCAAAb,aAAAH,KAAA,cAAAuB,iBAAAvB,KAAA,kBAAAwB,+BAAA,OAAAC,YAAAzB,KAAA,mBAAAD,WAAA,0BAAAC,KAAA,gBAAAD,WAAA,uBAAAC,KAAA,oBAAAD,WAAA,2BAAAC,KAAA,qBAAAD,WAAA,2BAAAC,KAAA,iBAAAD,WAAA,uBAAA2B,iBAAA1B,KAAA,4BAAAc,YAAA,iCAAAC,MAAAC,KAAA,mCAAAS,UAAA,sBAAAT,KAAA,mCAAAS,UAAA,uBAAAzB,KAAA,6BAAAc,YAAA,kCAAAC,MAAAC,KAAA,oCAAAS,UAAA,sBAAAT,KAAA,oCAAAS,UAAA,yBAAAzB,KAAA,yBAAAc,YAAA,8BAAAC,MAAAC,KAAA,gCAAAS,UAAA,sBAAAT,KAAA,gCAAAS,UAAA,oBAAAzB,KAAA,yBAAAc,YAAA,8BAAAC,MAAAC,KAAA,gCAAAS,UAAA,sBAAAT,KAAA,gCAAAS,UAAA,yBCDA,WACA,YACA/E,SAAAC,OAAA,oBACAC,QAAA,kBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,oBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAiG,WAAA,SAAAhB,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QAEArE,EAAA,GAAAF,GAAAO,aACAC,KAAA,oBACAgE,MAAAP,EACAiB,SAAA,gBACAR,KAAAR,EAAAC,EACAQ,KAAAR,GAaA,OAVAN,GAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,0BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,4BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,6BAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,6BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eC/HA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,sBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,wBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAwE,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,8BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,gCAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAsG,IAAA,iCAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,iCAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eClGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,mBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,qBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,2BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,6BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,8BAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,8BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,gBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GAEA7E,KAAA+E,gBAAA,KAEA/E,KAAAsH,eAAA,SAAAlB,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,mCAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAAuH,cAAA,SAAAnB,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,mCAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAAwH,kBAAA,SAAAC,EAAArB,GACA,GAAAd,GAAAxE,EAAAyE,OAgBA,OAfAmC,SAAAD,GAAA,MAAAA,EACA5G,EAAAiG,KAAA,sCAAAV,EAAAqB,GACArG,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAKAC,EAAAM,UAEAN,EAAAU,SAGAhG,KAAA2H,iBAAA,SAAAF,EAAArB,GACA,GAAAd,GAAAxE,EAAAyE,OAgBA,OAfAmC,SAAAD,GAAA,MAAAA,EACA5G,EAAAiG,KAAA,qCAAAV,EAAAqB,GACArG,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAKAC,EAAAM,UAEAN,EAAAU,SAGAhG,KAAA4H,kBAAA,SAAAxB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,sCAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAA6H,iBAAA,SAAAzB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,qCAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eC7GA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,mBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,qBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,2BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,6BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,8BAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,8BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,kBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,oBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,0BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,4BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,6BAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,6BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,mBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,qBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,2BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,6BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,8BAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,8BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,iBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GAEA7E,KAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,WACA,GAAAM,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,4CACAC,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,eCpBA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,eAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,iBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAwE,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,eChCA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,iBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,mBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,yBAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,2BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,4BAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,4BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,iCAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,mCAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,yCAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,2CAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,4CAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,4CAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,uBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,yBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,+BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,iCAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,kCAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,kCAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,uBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,yBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,+BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,iCAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAA8H,WAAA,SAAAjB,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAiG,KAAA,qCAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAKAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,kCAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAA+H,WAAA,SAAA3B,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,sCAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,kCAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAgI,WAAA,SAAA5B,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,sCAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCpJA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,gCAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,kCAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAuE,YAAA,WAAAC,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,wCAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,0CAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAkH,OAAA,SAAAd,EAAAS,GACA,GAAAvB,GAAAxE,EAAAyE,OAYA,OAXA1E,GAAAsG,IAAA,2CAAAf,EAAAS,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,2CAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,eCjGA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,eAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GAEA7E,KAAA+E,gBAAA,KAEA/E,KAAAiI,eAAA,SAAA7B,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,oCACAC,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,eCpBA,WACA,YACApG,SAAAC,OAAA,oBACAC,QAAA,mBAAA,QAAA,KAAA,SAAA,gBACA,SAAAe,EAAAC,EAAAE,EAAA6D,GACA,GAAAC,GAAA9E,IACAA,MAAA+E,gBAAA,KAEA/E,KAAAgF,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QACArE,EAAAF,EAAAO,YAAAC,KAAA,qBAgBA,OAfA,OAAAyD,IACA/D,EAAAA,EAAAsE,MAAAP,IAEA/D,EAAAA,EAAAwE,KAAAR,EAAAC,GAAAQ,KAAAR,GAEAN,EAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAiG,WAAA,SAAAhB,EAAAC,EAAAC,EAAAC,GACAA,EAAAA,IAAA,EAEA,OAAApF,KAAA+E,iBAAAK,IACApF,KAAA+E,gBAAAM,OAAA,6BACArF,KAAA+E,gBAAA,KAEA,IAAAO,GAAAxE,EAAAyE,QAEArE,EAAA,GAAAF,GAAAO,aACAC,KAAA,qBACAgE,MAAAP,EAEAS,KAAAR,EAAAC,EACAQ,KAAAR,GAaA,OAVAN,GAAA5D,aAAAC,GAAAE,KAAA,SAAAC,GACAiE,EAAAM,QAAAvE,EAAAwE,aAAAxE,MACAyD,EAAAC,gBAAA,MACA,SAAAe,EAAAC,GACAT,EAAAD,OAAAS,GACAhB,EAAAC,gBAAA,OAGA/E,KAAA+E,gBAAAO,EAEAA,EAAAU,SAGAhG,KAAAmG,IAAA,SAAAC,GACA,GAAAd,GAAAxE,EAAAyE,OAWA,OATA1E,IACAwF,OAAA,MACAC,IAAA,2BAAAF,IACAG,QAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,GACApB,EAAAM,QAAAvE,KACAsF,MAAA,SAAAb,EAAAC,GACAT,EAAAD,OAAAS,KAGAR,EAAAU,SAGAhG,KAAA4G,OAAA,SAAAC,GACA,GAAAvB,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAiG,KAAA,6BAAAD,GACAzF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,EAAAC,YAEA1B,EAAAD,OAAA,kCAIAC,EAAAU,SAGAhG,KAAAoH,OAAA,SAAAhB,GACA,GAAAd,GAAAxE,EAAAyE,OAaA,OAXA1E,GAAAwG,OAAA,8BAAAjB,GACAhF,KAAA,SAAA2F,GACAzB,EAAAM,QAAAmB,IACA,SAAAA,GACAA,EAAAC,WAAAC,OAAA,EACA3B,EAAAD,OAAA0B,GAEAzB,EAAAD,OAAA,kCAIAC,EAAAU,cC/GA,IAAAkC,KAAAtI,QAAAC,OAAA,QAAA,UAAA,UAAA,eAAA,YAAA,UAAA,YAAA,mBAAA,UAAA,iBAAA,mBAAA,uBACAD,SAAAC,OAAA,QAAA6G,OAAA,SAAAyB,GAEAA,EAAAC,MAAA,IAEAF,IAAAxB,OAAA,SAAA2B,EAAAC,GAEAA,EAAAC,UAAA,0BAEAF,EACAG,MAAA,QACAlC,IAAA,QACAmC,YAAA,kEAEAD,MAAA,gBACAlC,IAAA,WACAmC,YAAA,wEAEAD,MAAA,wBACAlC,IAAA,eACAmC,YAAA,+EAEAD,MAAA,iBACAlC,IAAA,YACAmC,YAAA,0EAEAD,MAAA,yBACAlC,IAAA,eACAmC,YAAA,iFAEAD,MAAA,gBACAlC,IAAA,WACAmC,YAAA,wEAEAD,MAAA,wBACAlC,IAAA,eACAmC,YAAA;GAEAD,MAAA,iBACAlC,IAAA,YACAmC,YAAA,0EAEAD,MAAA,yBACAlC,IAAA,eACAmC,YAAA,iFAEAD,MAAA,eACAlC,IAAA,UACAmC,YAAA,sEAEAD,MAAA,uBACAlC,IAAA,eACAmC,YAAA,6EAEAD,MAAA,iBACAlC,IAAA,YACAmC,YAAA,0EAEAD,MAAA,yBACAlC,IAAA,eACAmC,YAAA,iFAEAD,MAAA,iBACAlC,IAAA,YACAmC,YAAA,0EAEAD,MAAA,yBACAlC,IAAA,eACAmC,YAAA,iFAEAD,MAAA,+BACAlC,IAAA,2BACAmC,YAAA,sGAEAD,MAAA,uCACAlC,IAAA,eACAmC,YAAA,6GAEAD,MAAA,8BACAlC,IAAA,0BACAmC,YAAA,oGAEAD,MAAA,sCACAlC,IAAA,eACAmC,YAAA,6GCpFA,SAAAC,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,kBAAA,SAAA,SAAA,4BAAA,2BACA,SAAAC,EAAAC,EAAAC,EAAAC,GAEAH,EAAAtI,gBAAA,KACAwI,EAAA7I,iBAAA,WACA2I,EAAAtI,gBAAAwI,EAAAxI,kBAGAsI,EAAAlI,eAAA,KACAqI,EAAA9I,iBAAA,WACA2I,EAAAlI,eAAAqI,EAAArI,iBAGAkI,EAAAI,MAAA,SAAAR,GACA,wBAAAA,EACAK,EAAAI,GAAAT,GAGA,uCAAAA,GAAA,sCAAAA,EACAd,QAAAqB,EAAArI,gBAAA,MAAAqI,EAAArI,gBAAA,IAAAqI,EAAArI,eACAwI,OAAAvC,MAAA,oCAGAkC,EAAAI,GAAAT,GAIAd,QAAAoB,EAAAxI,iBAAA,MAAAwI,EAAAxI,iBAAA,IAAAwI,EAAAxI,gBACA4I,OAAAvC,MAAA,qCAGAkC,EAAAI,GAAAT,QAOAE,QCxCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,4BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,iBACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAsI,GACAV,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAAW,OACAX,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAkD,EAAAnD,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAF,EAAApC,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,KAIA2C,EAAA1C,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,UAMA+B,QCrCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,qBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,iBAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAsI,EAAAR,GACAF,EAAA5D,OAAA,WACA,GAAA6E,GAAA,GAAA7I,GAAA8I,UAAA,WAAA,IAAA,GACAC,EAAA,GAAA/I,GAAA8I,UAAA,YAAA,IAAA,EACA,IAAA9I,GAAA8I,UAAAE,KAAAH,EAAAE,GACAT,GAAAtE,OAAA,KAAA,EAAA,IAAA,GAAA5D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,wBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAF,EAAAlC,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,YAIA4D,EAAAwB,OAAA,SAAAZ,GACAF,EAAAnD,IAAAqD,GAAApI,KAAA,SAAAC,GACAyH,EAAAtI,mBAAAa,UAMAqH,QChCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,6BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAqJ,EAAAvB,GACAA,EAAA1I,kBACAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAAW,OACAX,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAiE,EAAAlE,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAa,EAAAnD,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAa,EAAAzD,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCvCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,sBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAqJ,EAAAvB,GACAF,EAAA5D,OAAA,WACA,GAAAC,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAa,GAAArF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,yBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAa,EAAAjD,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCvBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,6BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BAAA,2BACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAuJ,EAAAzB,EAAAC,GACAD,EAAA1I,kBACA2I,EAAA3I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAAW,OACAX,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAmE,EAAApE,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAe,EAAArD,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAe,EAAA3D,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCzCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,sBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAuJ,EAAAzB,GACAF,EAAA5D,OAAA,WACA,GAAAC,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAe,GAAAvF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,yBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAe,EAAAnD,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCvBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,4BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,iBAAA,4BACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAwJ,EAAA1B,GACAA,EAAA1I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAAW,OACAX,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAoE,EAAArE,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAgB,EAAAtD,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GAEAgB,EAAA5D,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCzCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,qBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,iBAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAwJ,EAAA1B,GACAF,EAAA5D,OAAA,WACA,GAAAC,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAgB,GAAAxF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,wBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAgB,EAAApD,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCvBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,6BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAyJ,EAAA3B,GACAA,EAAA1I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAqE,EAAAtE,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAiB,EAAAvD,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAiB,EAAA7D,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCvCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,sBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAyJ,EAAA3B,GACAF,EAAA5D,OAAA,WACA,GAAAC,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAiB,GAAAzF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,yBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAiB,EAAArD,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCvBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,2BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,gBAAA,4BACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAA0J,EAAA5B,GACAA,EAAA1I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAsE,EAAAvE,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAkB,EAAAxD,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAkB,EAAA9D,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCvCA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,oBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,gBAAA,4BAAA,2BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAA0J,EAAA5B,EAAAC,GACAH,EAAA5D,OAAA,WACA,GAAAC,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAkB,GAAA1F,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,uBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAkB,EAAAtD,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,YAIA4D,EAAAwB,OAAA,SAAAZ,GACAkB,EAAAvE,IAAAqD,GAAApI,KAAA,SAAAC,GACA0H,EAAApI,kBAAAU,UAKAqH,QC7BA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,2CAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,gCACA,4BAAA,2BAAA,kBAAA,kBACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAA2J,EACA7B,EAAAC,EAAAsB,EAAAE,GAEAzB,EAAA1I,kBACA2I,EAAA3I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,OAEAZ,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAuE,EAAAxE,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAAgC,gBAAA,SAAAC,GACA,GAAAhB,GAAA,GAAA7I,GAAA8I,UAAA,OAAA,cAAAe,GACAd,EAAA,GAAA/I,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,IACAvE,EAAA,GAAAjE,GAAA8I,UAAAE,KAAAH,EAAAE,GACA,OAAAM,GAAArF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACA,MAAAA,MAIAuH,EAAAkC,eAAA,SAAAjE,EAAAkE,EAAAC,GACApC,EAAA/B,KAAAoE,WAAApE,EAAA2C,IAGAZ,EAAAsC,gBAAA,SAAAL,GACA,GAAAhB,GAAA,GAAA7I,GAAA8I,UAAA,OAAA,cAAAe,GACAd,EAAA,GAAA/I,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,IACAvE,EAAA,GAAAjE,GAAA8I,UAAAE,KAAAH,EAAAE,GACA,OAAAQ,GAAAvF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACA,MAAAA,MAIAuH,EAAAuC,eAAA,SAAAtE,EAAAkE,EAAAC,GACApC,EAAA/B,KAAAuE,WAAAvE,EAAA2C,IAGAZ,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAmB,EAAAzD,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QAEA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAZ,EAAA/B,KAAAwE,SAAAtC,EAAArI,eAAA8I,GACAmB,EAAA/D,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QAEA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCxEA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,oCAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,gCAAA,4BAAA,2BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAA2J,EAAA7B,EAAAC,GACAH,EAAA5D,OAAA,WACA,GAAA6E,GAAA,GAAA7I,GAAA8I,UAAA,WAAA,KAAAf,EAAArI,eAAA8I,GAGAmB,GAAA3F,OAAA6E,EAAA,EAAA,IAAA,GAAAzI,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,uCAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAmB,EAAAvD,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCzBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,0CAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,+BACA,4BAAA,2BAAA,iBAAA,kBACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAsK,EACAxC,EAAAC,EAAAyB,EAAAC,GAEA3B,EAAA1I,kBACA2I,EAAA3I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,OAEAZ,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAkF,EAAAnF,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,KAIAuH,EAAA5D,SAEA4D,EAAA2C,eAAA,SAAAV,GACA,GAAAhB,GAAA,GAAA7I,GAAA8I,UAAA,OAAA,cAAAe,GACAd,EAAA,GAAA/I,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,IACAvE,EAAA,GAAAjE,GAAA8I,UAAAE,KAAAH,EAAAE,GACA,OAAAS,GAAAxF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACA,MAAAA,MAIAuH,EAAA4C,cAAA,SAAA3E,EAAAkE,EAAAC,GACApC,EAAA/B,KAAA4E,UAAA5E,EAAA2C,IAGAZ,EAAA8C,gBAAA,SAAAb,GACA,GAAAhB,GAAA,GAAA7I,GAAA8I,UAAA,OAAA,cAAAe,GACAd,EAAA,GAAA/I,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,IACAvE,EAAA,GAAAjE,GAAA8I,UAAAE,KAAAH,EAAAE,GACA,OAAAU,GAAAzF,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACA,MAAAA,MAIAuH,EAAA+C,eAAA,SAAA9E,EAAAkE,EAAAC,GACApC,EAAA/B,KAAA+E,WAAA/E,EAAA2C,IAGAZ,EAAAc,KAAA,WACAhC,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACA8B,EAAApE,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAZ,EAAA/B,KAAAwE,SAAAtC,EAAArI,eAAA8I,GACA8B,EAAA1E,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,WAMA+B,QCtEA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,mCAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,+BAAA,4BAAA,2BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAAsK,EAAAxC,EAAAC,GACAH,EAAA5D,OAAA,WACA,GAAA6E,GAAA,GAAA7I,GAAA8I,UAAA,WAAA,KAAAf,EAAArI,eAAA8I,GAGA8B,GAAAtG,OAAA6E,EAAA,EAAA,IAAA,GAAAzI,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,sCAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACA8B,EAAAlE,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCzBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,6BAAA,SAAA,SAAA,eAAA,eAAA,QAAA,YACA,WAAA,gBAAA,SAAA,kBAAA,kBAAA,cAAA,4BACA,SAAAC,EAAAC,EAAAM,EAAAC,EAAAvI,EAAAwI,EACAtI,EAAA8D,EAAA7D,EAAA6K,EAAAxB,EAAAyB,EAAAhD,GACAA,EAAA1I,kBAEAwI,EAAAW,KAAA,WACAX,EAAA/B,MAAA2C,GAAA,KAAAC,KAAA,KAEAb,EAAAW,OACAX,EAAA5D,OAAA,WACA0C,SAAAyB,EAAA/C,IAAA,KAAA+C,EAAA/C,IACAyF,EAAA1F,IAAAgD,EAAA/C,IAAAhF,KAAA,SAAAC,GACAuH,EAAA/B,KAAAxF,IAGAyK,EAAA9G,OAAA,KAAA,EAAA,GAAA,GAAA5D,KAAA,SAAAC,GACAuH,EAAAmD,MAAA1K,GAEA,IAAA4D,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAa,GAAArF,OAAAC,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAoD,UAAA3K,KAGAuH,EAAA5D,SAEA4D,EAAAc,KAAA,WACA,QAAAd,EAAAqD,iBAGAvE,SAAAkB,EAAA/B,KAAA2C,IAAA,OAAAZ,EAAA/B,KAAA2C,IAAA,KAAAZ,EAAA/B,KAAA2C,GACAqC,EAAA3E,OAAA0B,EAAA/B,KAAA2C,GAAAZ,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAiD,MAAAjD,MAIAiC,EAAA/B,KAAAyD,UAAAxB,EAAAxI,gBAAAkJ,GACAZ,EAAA/B,KAAAqF,OAAAtD,EAAA/B,KAAAsF,KAAA3C,GACA9B,QAAAkB,EAAA/B,KAAAuF,WACAxD,EAAA/B,KAAAoE,WAAArC,EAAA/B,KAAAuF,SAAA5C,IAEAqC,EAAAjF,OAAAgC,EAAA/B,MAAAzF,KAAA,SAAAC,GACAuH,EAAAe,QAAA3E,SACA4D,EAAAW,QACA,SAAA5C,GACAuC,OAAAvC,MAAA,qCAKAiC,EAAAqD,SAAA,WACA,MAAA,YAAArD,EAAA/B,KAAAsF,KAAA1C,MAAA,MAAAb,EAAA/B,KAAAuF,WACAlD,OAAAvC,MAAA,iCACA,QAMA+B,QChEA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA8I,WAAA,sBAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SAAA,kBAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EAAA6K,EAAA/C,GACAF,EAAA5D,OAAA,WACA,GAAAC,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAhB,EAAAxI,gBAAAkJ,GACAqC,GAAA7G,OAAAC,EAAA,EAAA,IAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAqB,MAAA5I,KAGAuH,EAAA5D,SAEA4D,EAAAsB,KAAA,SAAAV,GACAX,EAAAI,GAAA,yBAAA7C,GAAAoD,IAAAW,QAAA,KAGAvB,EAAAxB,OAAA,SAAAoC,GACAqC,EAAAzE,OAAAoC,GAAApI,KAAA,SAAAC,GACAuH,EAAA5D,gBAKA0D,QCvBA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA6G,OAAA,SAAA2B,GACAA,EACAG,MAAA,eACAlC,IAAA,eACAmC,YAAA,6FAGA7I,QAAAC,OAAA,QAAA8I,WAAA,yCAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SACA,iBAAA,kBAAA,kBAAA,gBAAA,cAAA,kBAAA,gCAAA,4BACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EACAsI,EAAAiB,EAAAF,EAAAK,EAAA2B,EAAAR,EAAAlB,EAAA7B,GACAF,EAAAtI,gBAAA,KACAsI,EAAA0D,iBAAA,KACA1D,EAAA2D,iBAAA,KACA3D,EAAAlI,eAAA,KACAkI,EAAA5D,OAAA,WACAqH,EAAApE,iBAAA7G,KAAA,SAAAC,GAEA,GAAA4D,IAAAuH,QAAAC,KAAApL,GAEAwK,GAAA5F,WAAAhB,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACA,GAAAqL,GAAArL,EAAAsL,IAAA,SAAAC,GAAA,MAAAA,GAAAtC,WACAhB,GAAArD,YAAAuD,IAAAqD,GAAAH,IAAA,EAAA,IAAA,GAAAtL,KAAA,SAAAC,GACA,GAAAA,EAAA4F,QACA2B,EAAAkE,QAAAzL,EACAuH,EAAAtI,gBAAAe,EAAA,GACAuH,EAAAmE,iBAGAnE,EAAAkE,QAAAzL,GAEA,SAAAsF,OAGA,SAAAA,SAKAiC,EAAA5D,SAEA4D,EAAAmE,cAAA,WACAnE,EAAAoE,eAAApE,EAAAtI,gBAAAkJ,KAGAZ,EAAAoE,eAAA,SAAAC,GACA,GAAAhI,GAAA,GAAAjE,GAAA8I,UAAA,YAAA,KAAAmD,EACAtC,GAAA3F,OAAAC,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAsE,SAAA7L,KAIAuH,EAAAuC,eAAA,WACAvC,EAAAuE,eAAAvE,EAAAtI,gBAAAkJ,GAAAZ,EAAA0D,iBAAAY,SAAA1D,KAGAZ,EAAAuE,eAAA,SAAAF,EAAAG,GACA,GAAAvD,GAAA,GAAA7I,GAAA8I,UAAA,YAAA,KAAAmD,GACAlD,EAAA,GAAA/I,GAAA8I,UAAA,aAAA,KAAAsD,GACAnI,EAAA,GAAAjE,GAAA8I,UAAAE,KAAAH,EAAAE,GACAY,GAAA3F,OAAAC,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAwD,SAAA/K,KAIAuH,EAAAkC,eAAA,WACAlC,EAAAyE,aAAAzE,EAAAtI,gBAAAkJ,GAAAZ,EAAA0D,iBAAAY,SAAA1D,GAAAZ,EAAA2D,iBAAAH,SAAA5C,KAGAZ,EAAAyE,aAAA,SAAAJ,EAAAG,EAAAE,GACA,GAAAzD,GAAA,GAAA7I,GAAA8I,UAAA,YAAA,KAAAmD,GACAlD,EAAA,GAAA/I,GAAA8I,UAAA,aAAA,KAAAsD,GACAG,EAAA,GAAAvM,GAAA8I,UAAA,aAAA,KAAAwD,GACArI,EAAA,GAAAjE,GAAA8I,UAAAE,KAAAH,EAAAE,EAAAwD,GACA5C,GAAA3F,OAAAC,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAA4E,OAAAnM,KAIAuH,EAAA6E,aAAA,WACA5E,EAAAI,GAAA,UACAgE,UAAArE,EAAAtI,gBAAAkJ,GAAAkE,SAAA9E,EAAAlI,eAAA8M,OAAAhE,GACA8D,WAAA1E,EAAA2D,iBAAAH,SAAA5C,GAAA4D,WAAAxE,EAAA0D,iBAAAY,SAAA1D,UAGAd,QCvFA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA6G,OAAA,SAAA2B,GACAA,EACAG,MAAA,UACAlC,IAAA,uEACAmC,YAAA,yEAGA7I,QAAAC,OAAA,QAAA8I,WAAA,+BAAA,SAAA,KAAA,SAAA,eAAA,QAAA,YAAA,WAAA,gBAAA,SACA,iBAAA,kBAAA,kBAAA,gBACA,cAAA,gCAAA,+BAAA,4BAAA,sBAAA,sBAAA,eACA,SAAAC,EAAA9H,EAAA+H,EAAAM,EAAAtI,EAAAwI,EAAAtI,EAAA8D,EAAA7D,EACAsI,EAAAiB,EAAAF,EAAAK,EACA2B,EAAA1B,EAAAW,EAAAxC,EAAA6E,EAAAC,EAAAC,GACAjF,EAAAkF,YAAA,KACAlF,EAAAmF,WAAA,KACAnF,EAAAoF,QACAF,YAAA,KAAAC,WAAA,KAAAE,SAAA,KAAAC,UAAA,KACA5D,UAAAnB,EAAA8D,UAAA5B,SAAAlC,EAAAuE,SACAzC,WAAA9B,EAAAmE,WAAAlC,WAAAjC,EAAAiE,YAEAe,UAAAC,YAAAC,mBAAA,SAAAC,GACA1F,EAAAoF,OAAAC,SAAAK,EAAAC,OAAAC,SACA5F,EAAAoF,OAAAE,UAAAI,EAAAC,OAAAE,YAEA7F,EAAA8F,UAEA9F,EAAA5D,OAAA,WACA,GAAA0C,QAAAyB,EAAAwF,gBAAA,MAAAxF,EAAAwF,gBAAA,IAAAxF,EAAAwF,eAAA,CACA,GAAA1J,GAAA,GAAAjE,GAAA8I,UAAA,KAAA,KAAAX,EAAAwF,eACAhB,GAAA3I,OAAAC,EAAA,EAAA,GAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAAoF,OAAA3M,EAAA,KAEA4D,EAAA,GAAAjE,GAAA8I,UAAA,iBAAA,KAAAX,EAAAwF,gBACAf,EAAA5I,OAAAC,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAA8F,OAAArN,IAEAuH,EAAAkF,YAAA,mCAAA3E,EAAAwF,eACA/F,EAAAmF,WAAA,kCAAA5E,EAAAwF,mBAEA,CACA,GAAA1J,GAAA,GAAAjE,GAAA8I,UAAA,WAAA,KAAAX,EAAAuE,SACApC,GAAAtG,OAAAC,EAAA,EAAA,KAAA,GAAA7D,KAAA,SAAAC,GACAuH,EAAA8F,OAAArN,MAIAuH,EAAA5D,SAEA4D,EAAAgG,eAAA,SAAAC,GACA,GAAAC,GAAA,GAAAC,WACAnG,GAAAoF,OAAAF,YAAAe,EAAAG,MAAA,GACAF,EAAAG,OAAA,SAAAC,GACAtG,EAAAkF,YAAAoB,EAAAC,OAAAC,OACAxG,EAAAyG,UAEAP,EAAAQ,cAAAT,EAAAG,MAAA,KAGApG,EAAA2G,cAAA,SAAAV,GACA,GAAAC,GAAA,GAAAC,WACAnG,GAAAoF,OAAAD,WAAAc,EAAAG,MAAA,GACAF,EAAAG,OAAA,SAAAC,GACAtG,EAAAmF,WAAAmB,EAAAC,OAAAC,OACAxG,EAAAyG,UAEAP,EAAAQ,cAAAT,EAAAG,MAAA,KAGApG,EAAAc,KAAA,WACA,GAAA8F,MACAxJ,EAAA,IACA,KAAA4C,EAAAqD,WACA,OAAA,CAEA,IAAAvE,QAAAyB,EAAAwF,gBAAA,MAAAxF,EAAAwF,gBAAA,IAAAxF,EAAAwF,eAAA,CACA,GAAAc,KACA7P,SAAAS,QAAAuI,EAAA8F,OAAA,SAAA7D,EAAAzH,GACAqM,EAAAtP,MACAqJ,GAAAqB,EAAArB,GACAkG,OAAA7E,EAAA6E,UAGA,IAAA7I,IAAAmH,OAAApF,EAAAoF,OAAA2B,QAAAF,EACAzJ,GAAA2H,EAAA5F,WAAAa,EAAAoF,OAAAxE,GAAA3C,GAAAzF,KAAA,SAAAC,GACAmO,EAAArP,KAAA6F,GACAA,EAAA6H,EAAArG,kBAAAoB,EAAAoF,OAAAF,YAAAzM,EAAAA,KAAAmI,IACAgG,EAAArP,KAAA6F,GACAA,EAAA6H,EAAAlG,iBAAAiB,EAAAoF,OAAAD,WAAA1M,EAAAA,KAAAmI,IACAgG,EAAArP,KAAA6F,GACAlF,EAAAQ,KAAAkO,IAAApO,KAAA,WACA8H,OAAA3C,QAAA,4BAIA,CACA,GAAAkJ,KACA7P,SAAAS,QAAAuI,EAAA8F,OAAA,SAAA7D,EAAAzH,GACAqM,EAAAtP,MACAmK,UAAAnB,EAAA8D,UACAxB,UAAAZ,EAAA+E,QAAApG,GACAoC,WAAAf,EAAAgF,SAAArG,GACAkG,OAAA7E,EAAA6E,UAGA,IAAA7I,IAAAmH,OAAApF,EAAAoF,OAAA2B,QAAAF,EACAzJ,GAAA2H,EAAA7F,WAAAjB,GAAAzF,KAAA,SAAAC,GACA2E,EAAA6H,EAAArG,kBAAAoB,EAAAoF,OAAAF,YAAAzM,EAAAA,KAAAmI,IACAgG,EAAArP,KAAA6F,GACAA,EAAA6H,EAAAlG,iBAAAiB,EAAAoF,OAAAD,WAAA1M,EAAAA,KAAAmI,IACAgG,EAAArP,KAAA6F,GACAlF,EAAAQ,KAAAkO,IAAApO,KAAA,WACA8H,OAAA3C,QAAA,oBACAsC,EAAAI,GAAA,UACAgE,UAAA9D,EAAA8D,UAAAS,SAAAvE,EAAAuE,SACAJ,WAAAnE,EAAAmE,WAAAF,WAAAjE,EAAAiE,WAAAuB,eAAAtN,EAAAA,KAAAmI,SAIAgG,EAAArP,KAAA6F,KAIA4C,EAAAqD,SAAA,WACA,GAAA6D,GAAA,EAAAC,EAAA,CACA,IAAA,MAAAnH,EAAAoF,OAAAF,YACA,GAAAgC,GAAAlH,EAAAoF,OAAAF,YAAAkC,IAEA,IAAA,MAAApH,EAAAoF,OAAAD,WACA,GAAAgC,GAAAnH,EAAAoF,OAAAD,WAAAiC,IAEA,SAAAF,EAAA,QAAAC,EAAA,UACAnG,MAAA,wCACA,IAKAhB,EAAAhB,kBAAA,WACAgB,EAAAkF,YAAA,KACAlF,EAAAoF,OAAAF,YAAA,KACApG,QAAAyB,EAAAwF,gBAAA,MAAAxF,EAAAwF,gBAAA,IAAAxF,EAAAwF,gBACAd,EAAAjG,kBAAAuB,EAAAwF,gBAAAvN,KAAA,eAMAwH,EAAAf,iBAAA,WACAe,EAAAmF,WAAA,KACAnF,EAAAoF,OAAAD,WAAA,KACAnO,QAAAiP,QAAAoB,SAAAC,cAAA,gBAAAC,QACAzI,QAAAyB,EAAAwF,gBAAA,MAAAxF,EAAAwF,gBAAA,IAAAxF,EAAAwF,gBACAd,EAAAhG,iBAAAsB,EAAAwF,gBAAAvN,KAAA,mBAMAsH,QChKA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA6G,OAAA,SAAA2B,GACAA,EACAG,MAAA,cACAlC,IAAA,eACAmC,YAAA,iFAGA7I,QAAAC,OAAA,QAAA8I,WAAA,mCAAA,SAAA,SAAA,eAAA,QAAA,YAAA,WAAA,kBAAA,gBAAA,SACA,iBAAA,kBAAA,kBAAA,gBACA,cAAA,gCAAA,+BAAA,4BAAA,sBAAA,sBACA,SAAAC,EAAAC,EAAAM,EAAAtI,EAAAwI,EAAAtI,EAAAqP,EAAAvL,EAAA7D,EACAsI,EAAAiB,EAAAF,EAAAK,EACA2B,EAAA1B,EAAAW,EAAAxC,EAAA6E,EAAAC,GAGAhF,EAAAyH,MACAC,SACAC,gBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,eAAA,EACAC,cAAA,SAAAC,GACAhI,EAAAgI,QAAAA,GAEAC,gBAAA,EACAC,oBAAA,WACAC,uBAAA,WACAC,oBAAA,SACAC,wBAAA,IACA5P,KAAA,KACA6P,aACAC,MAAA,KAAAC,YAAA,GAAAC,MAAA,KAAAb,iBAAA,EAAAC,eAAA,EAAAa,aAAA,sIACAH,MAAA,KAAAT,eAAA,EAAAU,YAAA,SAcAxI,EAAA5D,OAAA,iBAIA0D,QCpDA,SAAAA,GACA,YACA9I,SAAAC,OAAA,QAAA6G,OAAA,SAAA2B,GACAA,EACAG,MAAA,cACAlC,IAAA,cACAmC,YAAA,6DAGA7I,QAAAC,OAAA,QAAA8I,WAAA,wBAAA,SAAA,SAAA,eAAA,QAAA,YACA,WAAA,gBAAA,SAAA,gBAAA,sBACA,SAAAC,EAAAC,EAAAO,EAAAvI,EAAAwI,EACAtI,EAAA8D,EAAA7D,EAAAuQ,EAAA5D,GACA/E,EAAA5D,OAAA,WACAuM,EAAAvM,SAAA5D,KAAA,SAAAC,GACAuH,EAAA4I,YAAAnQ,KAAAA,EACAuH,EAAA4I,YAAAN,WAAA/Q,MACA+C,KAAA,SAAAoO,aAAA,wEAEA,IAAAG,MACAC,EAAA9I,EAAA4I,YAAAnQ,KAAA,EACA,KAAA,GAAA+B,KAAAsO,GACAD,EAAAtR,KAAAiD,GACA,WAAAA,GAAAA,EAAAuO,SAAA,OACA/I,EAAA4I,YAAAN,WAAA/Q,MACA+C,KAAAE,EAAAwO,aAAA,GAIAhJ,GAAA4I,YAAAN,WAAA/Q,MACA+C,KAAA,UAAA0O,aAAA,EAAAN,aAAA,6HAIA1I,EAAA5D,SAEA4D,EAAA4I,aACAhB,iBAAA,EACAC,eAAA,EACAI,gBAAA,EACAC,oBAAA,aACAC,uBAAA,WACAC,oBAAA,SACAC,wBAAA,IACA5P,QACA6P,eAaAtI,EAAAsB,KAAA,SAAA2H,GAEAhJ,EAAAI,GAAA,UACAgE,UAAA4E,EAAAvH,UAAAoD,SAAAmE,EAAAxG,SACAiC,WAAAuE,EAAA5G,WAAAmC,WAAAyE,EAAAzG,WAAAuD,eAAAkD,EAAArI,MAIAZ,EAAAxB,OAAA,SAAAhB,GACAuH,EAAA3F,WAAA5B,GAAAhF,KAAA,SAAAC,GACA,GAAAyQ,GAAAlJ,EAAA4I,YAAAnQ,KAAAsL,IAAA,SAAAC,GAAA,MAAAA,GAAApD,KAAAuI,QAAA3L,EAEAwC,GAAA4I,YAAAnQ,KAAA2Q,OAAAF,EAAA,IACA,SAAAnL,GACAuC,OAAAvC,MAAA,uDAIA+B","file":"app.min.js","sourcesContent":["\r\n(function() {\r\n    'use strict';\r\n    var services = angular.module('ApplicationServices', []);\r\n})();","angular.module('ApplicationServices').service('CompanyApplicationService', function () {\r\n    \r\n    var observers = [];\r\n    this.RegisterObserver = function (callback) {\r\n        observers.push(callback);\r\n    }\r\n\r\n    this.NotifyObservers = function () {\r\n        angular.forEach(observers, function (callback) {\r\n            callback();\r\n        });\r\n    };\r\n\r\n    this.SelectedCompany = null;\r\n    this.GetSelectedCompany = function () {\r\n        return SelectedCompany;\r\n    };\r\n\r\n    this.SetSelectedCompany = function (company) {\r\n        this.SelectedCompany = company;\r\n        this.NotifyObservers();\r\n    }\r\n});","angular.module('ApplicationServices').service('SurveyApplicationService', function () {\r\n    \r\n    var observers = [];\r\n    this.RegisterObserver = function (callback) {\r\n        observers.push(callback);\r\n    }\r\n\r\n    this.NotifyObservers = function () {\r\n        angular.forEach(observers, function (callback) {\r\n            callback();\r\n        });\r\n    };\r\n\r\n    this.SelectedSurvey = null;\r\n    this.GetSelectedCompany = function () {\r\n        return SelectedSurvey;\r\n    };\r\n\r\n    this.SetSelectedSurvey = function (survey) {\r\n        this.SelectedSurvey = survey;\r\n        this.NotifyObservers();\r\n    }\r\n});","\r\n(function() {\r\n    'use strict';\r\n    var services = angular.module('DatabaseServices', []);\r\n})();","(function () {\r\n\r\n    angular.module('DatabaseServices').factory('breezeservice',\r\n    ['$http', '$q', '$timeout', 'breeze', service]);\r\n\r\n    function service($http, $q, $timeout, breeze) {\r\n        var serviceName = '/breeze'; // route to the same origin Web Api controller\r\n        var dataService = new breeze.DataService({\r\n            serviceName: serviceName,\r\n            hasServerMetadata: false  // don't ask the server for metadata\r\n        });\r\n        var metadataStore = new breeze.MetadataStore();\r\n        //manager.enableSaveQueuing(true);\r\n        metadataStore.importMetadata(window.breeze.metadata);\r\n        //var masterManager = new breeze.EntityManager(serviceName);\r\n        var manager = new breeze.EntityManager({\r\n            dataService: dataService,\r\n            metadataStore: metadataStore\r\n        });\r\n        var meta = manager.metadataStore;\r\n        meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"UserRoleViewModel\");\r\n        //meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"Company\");\r\n        //meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"AspNetUser\");\r\n        //meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"AspNetRole\");\r\n\r\n        meta.setEntityTypeForResourceName(\"CompanyApi/Search\", \"CompanyViewModel\");\r\n        meta.setEntityTypeForResourceName(\"RoleApi/Search\", \"RoleViewModel\");\r\n        var service = {\r\n            executeQuery: executeQuery,\r\n            all: all\r\n        };\r\n        return service;\r\n\r\n        function executeQuery(query) {\r\n            return manager.executeQuery(query).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        function all() {\r\n            var query = breeze.EntityQuery\r\n                .from(resourceName);\r\n\r\n            return executeQuery(query);\r\n        }\r\n    }\r\n})();","window.breeze = window.breeze || {}; window.breeze.metadata = JSON.stringify(\n{\"schema\":{\"namespace\":\"Merchandiser\",\"alias\":\"Self\",\"annotation:UseStrongSpatialTypes\":\"false\",\"xmlns:annotation\":\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\",\"xmlns:customannotation\":\"http://schemas.microsoft.com/ado/2013/11/edm/customannotation\",\"xmlns\":\"http://schemas.microsoft.com/ado/2009/11/edm\",\"cSpaceOSpaceMapping\":\"[[\\\"Merchandiser.CompanyViewModel\\\",\\\"Merchandiser.Models.CompanyViewModel\\\"],[\\\"Merchandiser.RoleViewModel\\\",\\\"Merchandiser.Models.RoleViewModel\\\"],[\\\"Merchandiser.UserRoleViewModel\\\",\\\"Merchandiser.Models.UserRoleViewModel\\\"],[\\\"Merchandiser.CustomerViewModel\\\",\\\"Merchandiser.Models.CustomerViewModel\\\"],[\\\"Merchandiser.UserViewModel\\\",\\\"Merchandiser.Models.UserViewModel\\\"]]\",\"entityType\":[{\"name\":\"CompanyViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.CompanyViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"Name\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"Created\",\"type\":\"Edm.DateTime\",\"nullable\":\"false\"},{\"name\":\"CreatedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"ModifiedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]},{\"name\":\"RoleViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.RoleViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\",\"nullable\":\"false\"},{\"name\":\"Name\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]},{\"name\":\"UserRoleViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.UserRoleViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"UserId\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"RoleId\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"CompanyId\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"CustomerId\",\"type\":\"Edm.Guid\"}],\"navigationProperty\":[{\"name\":\"Company\",\"relationship\":\"Self.UserRoleViewModel_Company\",\"fromRole\":\"UserRoleViewModel_Company_Source\",\"toRole\":\"UserRoleViewModel_Company_Target\"},{\"name\":\"Customer\",\"relationship\":\"Self.UserRoleViewModel_Customer\",\"fromRole\":\"UserRoleViewModel_Customer_Source\",\"toRole\":\"UserRoleViewModel_Customer_Target\"},{\"name\":\"Role\",\"relationship\":\"Self.UserRoleViewModel_Role\",\"fromRole\":\"UserRoleViewModel_Role_Source\",\"toRole\":\"UserRoleViewModel_Role_Target\"},{\"name\":\"User\",\"relationship\":\"Self.UserRoleViewModel_User\",\"fromRole\":\"UserRoleViewModel_User_Source\",\"toRole\":\"UserRoleViewModel_User_Target\"}]},{\"name\":\"CustomerViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.CustomerViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"CompanyId\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"Name\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"Created\",\"type\":\"Edm.DateTime\",\"nullable\":\"false\"},{\"name\":\"CreatedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"ModifiedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]},{\"name\":\"UserViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.UserViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\",\"nullable\":\"false\"},{\"name\":\"UserName\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]}],\"association\":[{\"name\":\"UserRoleViewModel_Company\",\"end\":[{\"role\":\"UserRoleViewModel_Company_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_Company_Target\",\"type\":\"Edm.Self.CompanyViewModel\",\"multiplicity\":\"1\",\"onDelete\":{\"action\":\"Cascade\"}}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_Company_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_Company_Source\",\"propertyRef\":{\"name\":\"CompanyId\"}}}},{\"name\":\"UserRoleViewModel_Customer\",\"end\":[{\"role\":\"UserRoleViewModel_Customer_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_Customer_Target\",\"type\":\"Edm.Self.CustomerViewModel\",\"multiplicity\":\"0..1\"}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_Customer_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_Customer_Source\",\"propertyRef\":{\"name\":\"CustomerId\"}}}},{\"name\":\"UserRoleViewModel_Role\",\"end\":[{\"role\":\"UserRoleViewModel_Role_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_Role_Target\",\"type\":\"Edm.Self.RoleViewModel\",\"multiplicity\":\"0..1\"}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_Role_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_Role_Source\",\"propertyRef\":{\"name\":\"RoleId\"}}}},{\"name\":\"UserRoleViewModel_User\",\"end\":[{\"role\":\"UserRoleViewModel_User_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_User_Target\",\"type\":\"Edm.Self.UserViewModel\",\"multiplicity\":\"0..1\"}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_User_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_User_Source\",\"propertyRef\":{\"name\":\"UserId\"}}}}],\"entityContainer\":{\"name\":\"DatabaseContext\",\"customannotation:UseClrTypes\":\"true\",\"entitySet\":[{\"name\":\"CompanyViewModel\",\"entityType\":\"Self.CompanyViewModel\"},{\"name\":\"RoleViewModel\",\"entityType\":\"Self.RoleViewModel\"},{\"name\":\"UserRoleViewModel\",\"entityType\":\"Self.UserRoleViewModel\"},{\"name\":\"CustomerViewModels\",\"entityType\":\"Self.CustomerViewModel\"},{\"name\":\"UserViewModels\",\"entityType\":\"Self.UserViewModel\"}],\"associationSet\":[{\"name\":\"UserRoleViewModel_Company\",\"association\":\"Self.UserRoleViewModel_Company\",\"end\":[{\"role\":\"UserRoleViewModel_Company_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_Company_Target\",\"entitySet\":\"CompanyViewModel\"}]},{\"name\":\"UserRoleViewModel_Customer\",\"association\":\"Self.UserRoleViewModel_Customer\",\"end\":[{\"role\":\"UserRoleViewModel_Customer_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_Customer_Target\",\"entitySet\":\"CustomerViewModels\"}]},{\"name\":\"UserRoleViewModel_Role\",\"association\":\"Self.UserRoleViewModel_Role\",\"end\":[{\"role\":\"UserRoleViewModel_Role_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_Role_Target\",\"entitySet\":\"RoleViewModel\"}]},{\"name\":\"UserRoleViewModel_User\",\"association\":\"Self.UserRoleViewModel_User\",\"end\":[{\"role\":\"UserRoleViewModel_User_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_User_Target\",\"entitySet\":\"UserViewModels\"}]}]}}}\n);\r\n","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('CompanyService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('CompanyApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.SearchJson = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n\r\n            var query = new breeze.EntityQuery({\r\n                from: \"CompanyApi/Search\",\r\n                where: predicate,\r\n                orderBy: [\"Created desc\"],\r\n                skip: page * pageSize,\r\n                take: pageSize\r\n            });\r\n\r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n\r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/CompanyApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/CompanyApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/CompanyApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/CompanyApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('CompanyUserService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('CompanyUserApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/CompanyUserApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/CompanyUserApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.put('/breeze/CompanyUserApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/CompanyUserApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('CustomerService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('CustomerApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/CustomerApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/CustomerApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/CustomerApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/CustomerApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('ImageService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.GetBeforeImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/ImageApi/GetBeforeImage/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.GetAfterImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/ImageApi/GetBeforeImage/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.CreateBeforeImage = function (image, id) {\r\n                var deferred = $q.defer();\r\n                if (image != undefined && image != null) {\r\n                    $http.post('/api/v1/ImageApi/CreateBeforeImage/' + id, image)\r\n                    .then(function (response) {\r\n                        deferred.resolve(response);\r\n                    }, function (response) {\r\n                        if (response.statusText.length > 0) {\r\n                            deferred.reject(response.statusText);\r\n                        } else {\r\n                            deferred.reject(\"Failed to create the record.\");\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    deferred.resolve();\r\n                }\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.CreateAfterImage = function (image, id) {\r\n                var deferred = $q.defer();\r\n                if (image != undefined && image != null) {\r\n                    $http.post('/api/v1/ImageApi/CreateAfterImage/' + id, image)\r\n                    .then(function (response) {\r\n                        deferred.resolve(response);\r\n                    }, function (response) {\r\n                        if (response.statusText.length > 0) {\r\n                            deferred.reject(response.statusText);\r\n                        } else {\r\n                            deferred.reject(\"Failed to create the record.\");\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    deferred.resolve();\r\n                }\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.DeleteBeforeImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/api/v1/ImageApi/DeleteBeforeImage/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.DeleteAfterImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/api/v1/ImageApi/DeleteAfterImage/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('LocationService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('LocationApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/LocationApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/LocationApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/LocationApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/LocationApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('ProductService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('ProductApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/ProductApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/ProductApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/ProductApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/ProductApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('QuestionService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('QuestionApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/QuestionApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/QuestionApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/QuestionApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/QuestionApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('ReportService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function () {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/ReportApi/Search/null/null/null',\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('RoleService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('RoleApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.skip(page * pageSize).take(pageSize);\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };            \r\n\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyCustomerLocationService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyCustomerLocationApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyCustomerLocationApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyCustomerLocationApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyCustomerLocationApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyCustomerLocationApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyDetailService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyDetailApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyDetailApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyDetailApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyDetailApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyDetailApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyHeaderService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('SurveyHeaderApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Get = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/breeze/SurveyHeaderApi/Get/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Create = function (item) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.post('/breeze/SurveyHeaderApi/Create', item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response.statusText);\r\n                    } else {\r\n                        deferred.reject(\"Failed to create the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.CreateBulk = function (item) {\r\n                var deferred = $q.defer();\r\n                $http.post('/breeze/SurveyHeaderApi/CreateBulk', item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response.statusText);\r\n                    } else {\r\n                        deferred.reject(\"Failed to create the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n\r\n\r\n            this.Update = function (id, item) {\r\n                var deferred = $q.defer();\r\n                $http.put('/breeze/SurveyHeaderApi/Update/' + id, item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to update the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.UpdateBulk = function (id, item) {\r\n                var deferred = $q.defer();\r\n                $http.put('/breeze/SurveyHeaderApi/UpdateBulk/' + id, item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to update the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.Delete = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/breeze/SurveyHeaderApi/Delete/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.DeleteBulk = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/breeze/SurveyHeaderApi/DeleteBulk/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyProductQuestionService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyProductQuestionApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyProductQuestionApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyProductQuestionApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyProductQuestionApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyProductQuestionApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('UserService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.GetCurrentUser = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/UserApi/GetCurrentUser/',\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('UserRoleService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('UserRoleApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.skip(page * pageSize).take(pageSize);\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.SearchJson = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n\r\n                var query = new breeze.EntityQuery({\r\n                    from: \"UserRoleApi/Search\",\r\n                    where: predicate,\r\n                    //orderBy: [\"Created desc\"],\r\n                    skip: page * pageSize,\r\n                    take: pageSize\r\n                });\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Get = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/breeze/UserRoleApi/Get/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Create = function (item) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.post('/breeze/UserRoleApi/Create', item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response.statusText);\r\n                    } else {\r\n                        deferred.reject(\"Failed to create the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Delete = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/breeze/UserRoleApi/Delete/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n           \r\n        }]);\r\n})();","var app = angular.module('Main', ['ngRoute', 'ui.grid', 'ui.bootstrap', 'ngAnimate','ngTouch', 'ui.router', 'ui.grid.exporter', 'blockUI', 'breeze.angular', 'DatabaseServices', 'ApplicationServices']);\r\nangular.module('Main').config(function (blockUIConfig) {\r\n    // Change the default delay to 100ms before the blocking is visible\r\n    blockUIConfig.delay = 0;\r\n});\r\napp.config(function ($stateProvider, $urlRouterProvider) {\r\n    // For any unmatched url, send to /route1\r\n    $urlRouterProvider.otherwise(\"/main/company/addedit/\")\r\n\r\n    $stateProvider\r\n        .state('main', {\r\n            url: \"/main\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Main/Views/Main.html\"\r\n        })\r\n        .state('main.company', {\r\n            url: \"/company\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Company/Views/Company.html\"\r\n        })\r\n        .state('main.company.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Company/Views/CompanyAddEdit.html\",\r\n        })\r\n        .state('main.customer', {\r\n            url: \"/customer\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Customer/Views/Customer.html\"\r\n        })\r\n        .state('main.customer.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Customer/Views/CustomerAddEdit.html\",\r\n        })\r\n        .state('main.product', {\r\n            url: \"/product\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Product/Views/Product.html\"\r\n        })\r\n        .state('main.product.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Product/Views/ProductAddEdit.html\",\r\n        })\r\n        .state('main.location', {\r\n            url: \"/location\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Location/Views/Location.html\"\r\n        })\r\n        .state('main.location.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Location/Views/LocationAddEdit.html\",\r\n        })\r\n        .state('main.survey', {\r\n            url: \"/survey\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Survey/Views/Survey.html\"\r\n        })\r\n        .state('main.survey.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Survey/Views/SurveyAddEdit.html\",\r\n        })\r\n        .state('main.userrole', {\r\n            url: \"/userrole\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/UserRole/Views/UserRole.html\"\r\n        })\r\n        .state('main.userrole.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/UserRole/Views/UserRoleAddEdit.html\",\r\n        })\r\n        .state('main.question', {\r\n            url: \"/question\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Question/Views/Question.html\"\r\n        })\r\n        .state('main.question.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Question/Views/QuestionAddEdit.html\",\r\n        })\r\n        .state('main.surveycustomerlocation', {\r\n            url: \"/survey/customerlocation\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyCustomerLocation/Views/SurveyCustomerLocation.html\"\r\n        })\r\n        .state('main.surveycustomerlocation.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyCustomerLocation/Views/SurveyCustomerLocationAddEdit.html\",\r\n        })\r\n        .state('main.surveyproductquestion', {\r\n            url: \"/survey/productquestion\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyProductQuestion/Views/SurveyProductQuestion.html\"\r\n        })\r\n        .state('main.surveyproductquestion.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyProductQuestion/Views/SurveyProductQuestionAddEdit.html\",\r\n        })\r\n});","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('MainController', ['$scope', '$state', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, CompanyApplicationService, SurveyApplicationService) {      \r\n        //TODO: If a regular user go to company, if a company customer assigned to a survey, go to the survey data page.\r\n        $scope.SelectedCompany = null;\r\n        CompanyApplicationService.RegisterObserver(function () { \r\n            $scope.SelectedCompany = CompanyApplicationService.SelectedCompany;\r\n        })\r\n\r\n        $scope.SelectedSurvey = null;\r\n        SurveyApplicationService.RegisterObserver(function(){\r\n            $scope.SelectedSurvey = SurveyApplicationService.SelectedSurvey;\r\n        })\r\n\r\n        $scope.Route = function (state) {\r\n            if (state == \"main.company.addedit\") {\r\n                $state.go(state);\r\n            }\r\n            else {\r\n                if (state == \"main.surveycustomerlocation.addedit\" || state == \"main.surveyproductquestion.addedit\") {\r\n                    if (SurveyApplicationService.SelectedSurvey == undefined || SurveyApplicationService.SelectedSurvey == null || SurveyApplicationService.SelectedSurvey == \"\") {\r\n                        toastr.error(\"A survey must be selected first.\");\r\n                    }\r\n                    else {\r\n                        $state.go(state);\r\n                    }\r\n                }\r\n                else {\r\n                    if (CompanyApplicationService.SelectedCompany == undefined || CompanyApplicationService.SelectedCompany == null || CompanyApplicationService.SelectedCompany == \"\") {\r\n                        toastr.error(\"A company must be selected first.\");\r\n                    }\r\n                    else {\r\n                        $state.go(state);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CompanyAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CompanyService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, CompanyService) {\r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                CompanyService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                CompanyService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                CompanyService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CompanyController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CompanyService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, CompanyService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('Quantity', '>', 1);\r\n            var p2 = new breeze.Predicate('Longitude', '<', 1);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            CompanyService.Search(null, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.company.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            CompanyService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n        \r\n        $scope.Select = function (Id) {\r\n            CompanyService.Get(Id).then(function (data) {\r\n                CompanyApplicationService.SetSelectedCompany(data);\r\n            });\r\n        }\r\n        \r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CustomerAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CustomerService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, CustomerService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                CustomerService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                CustomerService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                CustomerService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CustomerController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CustomerService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, CustomerService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            CustomerService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.customer.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            CustomerService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('LocationAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'LocationService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, LocationService, CompanyApplicationService, SurveyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n        SurveyApplicationService.NotifyObservers();\r\n        \r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                LocationService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                LocationService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                LocationService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('LocationController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'LocationService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, LocationService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            LocationService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.location.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            LocationService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('ProductAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'ProductService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, ProductService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();        \r\n        \r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                ProductService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                ProductService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                debugger;\r\n                ProductService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('ProductController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'ProductService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, ProductService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            ProductService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.product.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            ProductService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('QuestionAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'QuestionService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, QuestionService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();        \r\n        \r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                QuestionService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                QuestionService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                 $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                QuestionService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('QuestionController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'QuestionService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, QuestionService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            QuestionService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.question.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            QuestionService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n        \r\n        $scope.Init = function(){\r\n            $scope.item = { Id : null, Name : \"\"}\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                SurveyService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                SurveyService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                SurveyService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyService, CompanyApplicationService, SurveyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            SurveyService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.survey.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            SurveyService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n\r\n        $scope.Select = function (Id) {\r\n            SurveyService.Get(Id).then(function (data) {\r\n                SurveyApplicationService.SetSelectedSurvey(data);\r\n            });\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyCustomerLocationAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyCustomerLocationService',\r\n        'CompanyApplicationService', 'SurveyApplicationService', 'CustomerService', 'LocationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyCustomerLocationService,\r\n        CompanyApplicationService, SurveyApplicationService, CustomerService, LocationService) {\r\n\r\n        CompanyApplicationService.NotifyObservers();\r\n        SurveyApplicationService.NotifyObservers();\r\n\r\n        $scope.Init = function(){\r\n            $scope.item = { Id : null }\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                SurveyCustomerLocationService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.SearchCustomers = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return CustomerService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectCustomer = function (item, model, label) {\r\n            $scope.item.CustomerId = item.Id;\r\n        }\r\n\r\n        $scope.SearchLocations = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return LocationService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectLocation = function (item, model, label) {\r\n            $scope.item.LocationId = item.Id;\r\n        }\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                SurveyCustomerLocationService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                    //$state.go('main.surveycustomerlocation.addedit', { }, { reload: true, inherit: false });\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                $scope.item.SurveyId = SurveyApplicationService.SelectedSurvey.Id;\r\n                SurveyCustomerLocationService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                    //$state.go('main.surveycustomerlocation.addedit', {}, { reload: true, inherit: false });\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyCustomerLocationController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyCustomerLocationService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyCustomerLocationService, CompanyApplicationService, SurveyApplicationService) {\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('SurveyId', '==', SurveyApplicationService.SelectedSurvey.Id);\r\n            //var p2 = new breeze.Predicate('Longitude', '<', 1);\r\n            //var predicate = new breeze.Predicate.and([p1, p2]);\r\n            SurveyCustomerLocationService.Search(p1, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.surveycustomerlocation.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            SurveyCustomerLocationService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyProductQuestionAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyProductQuestionService',\r\n        'CompanyApplicationService', 'SurveyApplicationService', 'ProductService','QuestionService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyProductQuestionService,\r\n        CompanyApplicationService, SurveyApplicationService, ProductService, QuestionService) {\r\n\r\n        CompanyApplicationService.NotifyObservers();\r\n        SurveyApplicationService.NotifyObservers();\r\n\r\n        $scope.Init = function(){\r\n            $scope.item = { Id : null }\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                SurveyProductQuestionService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.SearchProducts = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return ProductService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectProduct = function (item, model, label) {\r\n            $scope.item.ProductId = item.Id;\r\n        }\r\n\r\n        $scope.SearchQuestions = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return QuestionService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectQuestion = function (item, model, label) {\r\n            $scope.item.QuestionId = item.Id;\r\n        }\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                SurveyProductQuestionService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                $scope.item.SurveyId = SurveyApplicationService.SelectedSurvey.Id;\r\n                SurveyProductQuestionService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyProductQuestionController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyProductQuestionService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyProductQuestionService, CompanyApplicationService, SurveyApplicationService) {\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('SurveyId', '==', SurveyApplicationService.SelectedSurvey.Id);\r\n            //var p2 = new breeze.Predicate('Longitude', '<', 1);\r\n            //var predicate = new breeze.Predicate.and([p1, p2]);\r\n            SurveyProductQuestionService.Search(p1, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.surveyproductquestion.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            SurveyProductQuestionService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').controller('UserRoleAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location',\r\n        '$timeout', 'breezeservice', 'breeze', 'UserRoleService', 'CustomerService', 'RoleService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location,\r\n        $timeout, breezeservice, breeze, UserRoleService, CustomerService, RoleService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n\r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                UserRoleService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n            RoleService.Search(null, 0, 5, false).then(function (data) {\r\n                $scope.Roles = data;\r\n            });\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            CustomerService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Customers = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if (!$scope.Validate()) {\r\n                return false;\r\n            }\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                UserRoleService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                $scope.item.RoleId = $scope.item.Role.Id;\r\n                if ($scope.item.Customer != undefined) {\r\n                    $scope.item.CustomerId = $scope.item.Customer.Id;\r\n                }\r\n                UserRoleService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    toastr.error(\"The username does not exist.\");\r\n                });\r\n            }\r\n        }\r\n\r\n        $scope.Validate = function () {\r\n            if ($scope.item.Role.Name == \"Customer\" && $scope.item.Customer == null) {\r\n                toastr.error(\"A customer must be selected.\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('UserRoleController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'UserRoleService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, UserRoleService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            UserRoleService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.userrole.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            UserRoleService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('merchandise', {\r\n            url: \"/merchandise\",\r\n            templateUrl: \"/App/ApplicationComponents/DataEntry/CustomerLocation/MerchandiseCustomerLocation.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MerchandiseCustomerLocationController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze',\r\n        'CompanyService', 'LocationService', 'CustomerService', 'SurveyService', 'UserService', 'UserRoleService', 'SurveyCustomerLocationService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze,\r\n        CompanyService, LocationService, CustomerService, SurveyService, UserService, UserRoleService, SurveyCustomerLocationService, CompanyApplicationService) {\r\n        $scope.SelectedCompany = null;\r\n        $scope.SelectedLocation = null;\r\n        $scope.SelectedCustomer = null;\r\n        $scope.SelectedSurvey = null;\r\n        $scope.Search = function () {\r\n            UserService.GetCurrentUser().then(function (data) {\r\n                //http://stackoverflow.com/questions/18918470/breezejs-where-value-in-array\r\n                var predicate = { \"UserId\": { \"==\": data } };\r\n                //var predicate = { \"UserId\": { eq: { value: data, dataType: \"Guid\", isProperty: true } } };\r\n                UserRoleService.SearchJson(predicate, 0, 100, false).then(function (data) {\r\n                    var companies = data.map(function (e) { return e.CompanyId; });\r\n                    CompanyService.SearchJson({ \"Id\": { in: companies } }, 0, 20, false).then(function (data) {\r\n                        if (data.length == 1) {\r\n                            $scope.Company = data;\r\n                            $scope.SelectedCompany = data[0];\r\n                            $scope.SelectCompany();\r\n                        }\r\n                        else {\r\n                            $scope.Company = data;\r\n                        }\r\n                    }, function (error) {\r\n                        debugger;\r\n                    });\r\n                }, function (error) {\r\n                    debugger;\r\n                });\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.SelectCompany = function () {\r\n            $scope.LocationSearch($scope.SelectedCompany.Id);\r\n        }\r\n\r\n        $scope.LocationSearch = function (companyId) {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', companyId);\r\n            SurveyCustomerLocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Location = data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectLocation = function () {\r\n            $scope.CustomerSearch($scope.SelectedCompany.Id, $scope.SelectedLocation.Location.Id);\r\n        }\r\n\r\n        $scope.CustomerSearch = function (companyId, locationId) {\r\n            var p1 = new breeze.Predicate('CompanyId', '==', companyId);\r\n            var p2 = new breeze.Predicate('LocationId', '==', locationId);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            SurveyCustomerLocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Customer = data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectCustomer = function () {\r\n            $scope.SurveySearch($scope.SelectedCompany.Id, $scope.SelectedLocation.Location.Id, $scope.SelectedCustomer.Customer.Id);\r\n        }\r\n\r\n        $scope.SurveySearch = function (companyId, locationId, customerId) {\r\n            var p1 = new breeze.Predicate('CompanyId', '==', companyId);\r\n            var p2 = new breeze.Predicate('LocationId', '==', locationId);\r\n            var p3 = new breeze.Predicate('CustomerId', '==', customerId);\r\n            var predicate = new breeze.Predicate.and([p1, p2, p3]);\r\n            SurveyCustomerLocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Survey = data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectSurvey = function () {\r\n            $state.go('survey', {\r\n                companyId: $scope.SelectedCompany.Id, surveyId: $scope.SelectedSurvey.Survey.Id,\r\n                customerId: $scope.SelectedCustomer.Customer.Id, locationId: $scope.SelectedLocation.Location.Id });\r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('survey', {\r\n            url: \"/survey/:companyId/:surveyId/:customerId/:locationId/:surveyHeaderId\",\r\n            templateUrl: \"/App/ApplicationComponents/DataEntry/Survey/MerchandiseSurvey.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MerchandiseSurveyController', ['$scope', '$q', '$state', '$stateParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze',\r\n        'CompanyService', 'LocationService', 'CustomerService', 'SurveyService',\r\n        'UserService', 'SurveyCustomerLocationService', 'SurveyProductQuestionService', 'CompanyApplicationService', 'SurveyHeaderService', 'SurveyDetailService', 'ImageService',\r\n    function controller($scope, $q, $state, $stateParams, $http, $location, $timeout, breezeservice, breeze,\r\n        CompanyService, LocationService, CustomerService, SurveyService,\r\n        UserService, SurveyCustomerLocationService, SurveyProductQuestionService, CompanyApplicationService, SurveyHeaderService, SurveyDetailService, ImageService) {\r\n        $scope.BeforeImage = null;\r\n        $scope.AfterImage = null;\r\n        $scope.Header = {\r\n            BeforeImage: null, AfterImage: null, Latitude: null, Longitude: null,\r\n            CompanyId: $stateParams.companyId, SurveyId: $stateParams.surveyId,\r\n            CustomerId: $stateParams.customerId, LocationId: $stateParams.locationId\r\n        }\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            $scope.Header.Latitude = position.coords.latitude;\r\n            $scope.Header.Longitude = position.coords.longitude;\r\n        });\r\n        $scope.Detail = [];\r\n\r\n        $scope.Search = function () {\r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                var predicate = new breeze.Predicate('Id', '==', $stateParams.surveyHeaderId);\r\n                SurveyHeaderService.Search(predicate, 0, 1, false).then(function (data) {\r\n                    $scope.Header = data[0];\r\n                })\r\n                predicate = new breeze.Predicate('SurveyHeaderId', '==', $stateParams.surveyHeaderId);\r\n                SurveyDetailService.Search(predicate, 0, 100, false).then(function (data) {\r\n                    $scope.Detail = data;\r\n                });\r\n                $scope.BeforeImage = \"/api/v1/ImageApi/GetBeforeImage/\" + $stateParams.surveyHeaderId;\r\n                $scope.AfterImage = \"/api/v1/ImageApi/GetAfterImage/\" + $stateParams.surveyHeaderId;\r\n            }\r\n            else {\r\n                var predicate = new breeze.Predicate('SurveyId', '==', $stateParams.surveyId);\r\n                SurveyProductQuestionService.Search(predicate, 0, 100, false).then(function (data) {\r\n                    $scope.Detail = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.setBeforeImage = function (element) {\r\n            var reader = new FileReader();\r\n            $scope.Header.BeforeImage = element.files[0];\r\n            reader.onload = function (event) {\r\n                $scope.BeforeImage = event.target.result;\r\n                $scope.$apply();\r\n            }\r\n            reader.readAsDataURL(element.files[0]);\r\n        }\r\n\r\n        $scope.setAfterImage = function (element) {\r\n            var reader = new FileReader();\r\n            $scope.Header.AfterImage = element.files[0];\r\n            reader.onload = function (event) {\r\n                $scope.AfterImage = event.target.result;\r\n                $scope.$apply();\r\n            }\r\n            reader.readAsDataURL(element.files[0]);\r\n        }\r\n\r\n        $scope.Save = function () {\r\n            var promises = [];\r\n            var promise = null;\r\n            if (!$scope.Validate()) {\r\n                return false;\r\n            }\r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                var details = [];\r\n                angular.forEach($scope.Detail, function (value, key) {\r\n                    details.push({\r\n                        Id: value.Id,\r\n                        Answer: value.Answer\r\n                    })\r\n                });\r\n                var item = { Header: $scope.Header, Details: details };\r\n                promise = SurveyHeaderService.UpdateBulk($scope.Header.Id, item).then(function(data){\r\n                    promises.push(promise);\r\n                    promise = ImageService.CreateBeforeImage($scope.Header.BeforeImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    promise = ImageService.CreateAfterImage($scope.Header.AfterImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    $q.all([promises]).then(function () {\r\n                        toastr.success(\"Save successful.\");\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                var details = [];\r\n                angular.forEach($scope.Detail, function (value, key) {\r\n                    details.push({\r\n                        CompanyId: $stateParams.companyId,\r\n                        ProductId: value.Product.Id,\r\n                        QuestionId: value.Question.Id,\r\n                        Answer: value.Answer\r\n                    })\r\n                });\r\n                var item = { Header: $scope.Header, Details: details };\r\n                promise = SurveyHeaderService.CreateBulk(item).then(function (data) {\r\n                    promise = ImageService.CreateBeforeImage($scope.Header.BeforeImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    promise = ImageService.CreateAfterImage($scope.Header.AfterImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    $q.all([promises]).then(function () {\r\n                        toastr.success(\"Save successful.\");\r\n                        $state.go('survey', {\r\n                            companyId: $stateParams.companyId, surveyId: $stateParams.surveyId,\r\n                            customerId: $stateParams.customerId, locationId: $stateParams.locationId, surveyHeaderId: data.data.Id\r\n                        });\r\n                    });\r\n                });\r\n                promises.push(promise);  \r\n            }\r\n        }\r\n\r\n        $scope.Validate = function () {\r\n            var fileSizeBeforeImage = 0; var fileSizeAfterImage = 0;\r\n            if ($scope.Header.BeforeImage != null) {\r\n                var fileSizeBeforeImage = $scope.Header.BeforeImage.size; // in bytes\r\n            }\r\n            if ($scope.Header.AfterImage != null) {\r\n                var fileSizeAfterImage = $scope.Header.AfterImage.size; // in bytes\r\n            }\r\n            if (fileSizeBeforeImage > 3096000 || fileSizeAfterImage > 3096000) {\r\n                alert('File size is more then ' + 3 + ' Megabytes.');\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        $scope.DeleteBeforeImage = function () {\r\n            $scope.BeforeImage = null;\r\n            $scope.Header.BeforeImage = null; \r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                ImageService.DeleteBeforeImage($stateParams.surveyHeaderId).then(function () {\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n        $scope.DeleteAfterImage = function () {\r\n            $scope.AfterImage = null;\r\n            $scope.Header.AfterImage = null;\r\n            angular.element(document.querySelector('#AfterImage')).empty();\r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                ImageService.DeleteAfterImage($stateParams.surveyHeaderId).then(function () {\r\n\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('surveydata', {\r\n            url: \"/surveydata/\",\r\n            templateUrl: \"/App/ApplicationComponents/DataEntry/SurveyData/MerchandiseSurveyData.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MerchandiseSurveyDataController', ['$scope', '$state', '$stateParams', '$http', '$location', '$timeout', 'uiGridConstants', 'breezeservice', 'breeze',\r\n        'CompanyService', 'LocationService', 'CustomerService', 'SurveyService',\r\n        'UserService', 'SurveyCustomerLocationService', 'SurveyProductQuestionService', 'CompanyApplicationService', 'SurveyHeaderService', 'SurveyDetailService',\r\n    function controller($scope, $state, $stateParams, $http, $location, $timeout, uiGridConstants, breezeservice, breeze,\r\n        CompanyService, LocationService, CustomerService, SurveyService,\r\n        UserService, SurveyCustomerLocationService, SurveyProductQuestionService, CompanyApplicationService, SurveyHeaderService, SurveyDetailService) {\r\n\r\n\r\n        $scope.grid = {\r\n            options: {\r\n                showGridFooter: true,\r\n                enableFiltering: true,\r\n                enableSorting: true,\r\n                headerTooltip: true,\r\n                onRegisterApi: function (gridApi) {\r\n                    $scope.gridApi = gridApi;\r\n                },\r\n                enableGridMenu: true,\r\n                exporterCsvFilename: 'data.csv',\r\n                exporterPdfOrientation: 'portrait',\r\n                exporterPdfPageSize: 'LETTER',\r\n                exporterPdfMaxGridWidth: 450,\r\n                data: null,\r\n                columnDefs: [\r\n                    { field: 'Id', displayName: '', width: '60', enableFiltering: false, enableSorting: false, cellTemplate: '<div><button class=\"btn btn-danger btn-sm\" ng-click=\"grid.appScope.vm.functions.data.delete(row.entity.Id)\">Delete</button></div>' },\r\n                    { field: 'Id', headerTooltip: true, displayName: 'Id' },\r\n                    //{ field: 'EmployeeId', cellTooltip: true, headerTooltip: true, displayName: 'Employee Id (unique)' },\r\n                    //{ field: 'FirstName', cellTooltip: true, headerTooltip: true, displayName: 'First Name' },\r\n                    //{ field: 'LastName', cellTooltip: true, headerTooltip: true, displayName: 'Last Name' },\r\n                    //{ field: 'ElectionPeriod', cellTooltip: true, headerTooltip: true, displayName: 'Election Period (unique)', cellTemplate: '<div class=\"ui-grid-cell-contents\">{{row.entity.ElectionPeriod | date: \"MM/dd/yyyy\"}}</div>' },\r\n                    //{ field: 'AmountDueDate', cellTooltip: true, headerTooltip: true, displayName: 'Amount Due Date', cellTemplate: '<div class=\"ui-grid-cell-contents\">{{row.entity.AmountDueDate | date: \"MM/dd/yyyy\"}}</div>' },\r\n                    //{ field: 'SharesVesting', cellTooltip: true, headerTooltip: true, displayName: 'Shares Vesting' },\r\n                    //{ field: 'IsViewed', cellTooltip: true, headerTooltip: true, displayName: 'Is Viewed' },\r\n                    //{ field: 'ElectionType', cellTooltip: true, headerTooltip: true, displayName: 'Election Type' },\r\n                    //{ field: 'Created', cellTooltip: true, headerTooltip: true, displayName: 'Created', cellTemplate: '<div class=\"ui-grid-cell-contents\">{{row.entity.Created | date: \"MM/dd/yyyy\"}}</div>' }\r\n                ]\r\n            }\r\n        }\r\n\r\n        $scope.Search = function () {\r\n            \r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('reportmain', {\r\n            url: \"/reportmain\",\r\n            templateUrl: \"/App/ApplicationComponents/Report/Main/ReportMain.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('ReportMainController', ['$scope', '$state', '$routeParams', '$http', '$location',\r\n        '$timeout', 'breezeservice', 'breeze', 'ReportService','SurveyHeaderService',\r\n    function controller($scope, $state, $routeParams, $http, $location,\r\n        $timeout, breezeservice, breeze, ReportService, SurveyHeaderService) {\r\n        $scope.Search = function () {\r\n            ReportService.Search().then(function (data) {\r\n                $scope.gridOptions.data = data;\r\n                $scope.gridOptions.columnDefs.push({\r\n                    name: 'Manage', cellTemplate: '/App/ApplicationComponents/Report/Main/CellTemplates/EditDelete.html'\r\n                });\r\n                var keys = []\r\n                var obj = $scope.gridOptions.data[0];\r\n                for (var key in obj) {\r\n                    keys.push(key)\r\n                    if (key != 'Created' && !key.includes(\"Id\")) {\r\n                        $scope.gridOptions.columnDefs.push({\r\n                            name: key, cellTooltip: true\r\n                        });\r\n                    }\r\n                }\r\n                $scope.gridOptions.columnDefs.push({\r\n                    name: 'Created', cellTooltip: true, cellTemplate: '<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{row.entity.Created | date: \"MM/dd/yyyy h:mm:ss a\": \"UTC\"}}</div>'\r\n                });\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.gridOptions = {\r\n            enableFiltering: true,\r\n            enableSorting: true,\r\n            enableGridMenu: true,\r\n            exporterCsvFilename: 'myFile.csv',\r\n            exporterPdfOrientation: 'portrait',\r\n            exporterPdfPageSize: 'LETTER',\r\n            exporterPdfMaxGridWidth: 500,\r\n            data: [],\r\n            columnDefs: [\r\n              //{ name: 'Id' },\r\n              //{ name: 'ProductName' },\r\n              //{ name: 'LocationName' },\r\n              //{ name: 'CustomerName' },\r\n              //{ name: 'Question' },\r\n              //{ name: 'Answer' },\r\n              //{ name: $scope.gridOptions.data[0] },\r\n              //{ name: 'Created', cellTemplate: '<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{row.entity.Created | date: \"MM/dd/yyyy h:mm:ss a\": \"UTC\"}}</div>' }\r\n              //{ name: 'cumulativeWidgets', field: 'widgets', cellTemplate: '<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{grid.appScope.cumulative(grid, row)}}</div>' }\r\n            ]\r\n        };\r\n\r\n        $scope.Edit = function (row) {\r\n            debugger;\r\n            $state.go('survey', {\r\n                companyId: row.CompanyId, surveyId: row.SurveyId,\r\n                customerId: row.CustomerId, locationId: row.LocationId, surveyHeaderId: row.Id\r\n            });\r\n        }\r\n\r\n        $scope.Delete = function(id){\r\n            SurveyHeaderService.DeleteBulk(id).then(function (data) {\r\n                var index = $scope.gridOptions.data.map(function (e) { return e.Id; }).indexOf(id);\r\n                debugger;\r\n                $scope.gridOptions.data.splice(index, 1);\r\n            }, function (error) {\r\n                toastr.error(\"There was an error deleting the survey data.\");\r\n            });\r\n        }\r\n    }]);\r\n})(moment);"],"sourceRoot":"/source/"}