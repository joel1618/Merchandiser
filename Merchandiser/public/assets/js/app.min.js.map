{"version":3,"sources":["ApplicationServices.js","Company/CompanyApplicationService.js","Survey/SurveyApplicationService.js","DatabaseServices.js","Breeze/breezeservice.js","Breeze/metadata.js","Customer/CustomerService.js","Company/CompanyService.js","CompanyUser/CompanyUserService.js","Image/ImageService.js","Location/LocationService.js","Map/MapService.js","Product/ProductService.js","Question/QuestionService.js","Report/ReportService.js","Role/RoleService.js","Survey/SurveyService.js","SurveyCustomerLocation/SurveyCustomerLocationService.js","SurveyDetail/SurveyDetailService.js","SurveyHeader/SurveyHeaderService.js","SurveyProductQuestion/SurveyProductQuestionService.js","User/UserService.js","UserRole/UserRoleService.js","App.js","MainController.js","CompanyAddEditController.js","CompanyController.js","Location/Controllers/LocationAddEditController.js","Location/Controllers/LocationController.js","Customer/Controllers/CustomerAddEditController.js","Customer/Controllers/CustomerController.js","Product/Controllers/ProductAddEditController.js","Product/Controllers/ProductController.js","Question/Controllers/QuestionAddEditController.js","Question/Controllers/QuestionController.js","Survey/Controllers/SurveyAddEditController.js","Survey/Controllers/SurveyController.js","SurveyCustomerLocation/Controllers/SurveyCustomerLocationAddEditController.js","SurveyCustomerLocation/Controllers/SurveyCustomerLocationController.js","SurveyProductQuestion/Controllers/SurveyProductQuestionAddEditController.js","SurveyProductQuestion/Controllers/SurveyProductQuestionController.js","UserRole/Controllers/UserRoleAddEditController.js","UserRole/Controllers/UserRoleController.js","CustomerLocation/MerchandiseCustomerLocationController.js","Survey/MerchandiseSurveyController.js","SurveyData/MerchandiseSurveyData.js","Main/ReportMainController.js","Map/MapController.js"],"names":["angular","module","service","observers","this","RegisterObserver","callback","push","NotifyObservers","forEach","SelectedCompany","GetSelectedCompany","SetSelectedCompany","company","SelectedSurvey","SetSelectedSurvey","survey","$http","$q","$timeout","breeze","executeQuery","query","manager","then","data","all","EntityQuery","from","resourceName","serviceName","dataService","DataService","hasServerMetadata","metadataStore","MetadataStore","importMetadata","window","metadata","EntityManager","meta","setEntityTypeForResourceName","factory","JSON","stringify","schema","namespace","alias","annotation:UseStrongSpatialTypes","xmlns:annotation","xmlns:customannotation","xmlns","cSpaceOSpaceMapping","entityType","name","customannotation:ClrType","key","propertyRef","property","type","nullable","maxLength","fixedLength","unicode","navigationProperty","relationship","fromRole","toRole","association","end","role","multiplicity","onDelete","action","referentialConstraint","principal","dependent","entityContainer","customannotation:UseClrTypes","entitySet","associationSet","breezeservice","_self","deferredRequest","Search","predicate","page","pageSize","cancelExistingSearch","reject","deferred","defer","where","orderByDesc","skip","take","resolve","httpResponse","msg","code","promise","SearchJson","orderBy","Get","id","method","url","success","status","headers","config","error","Create","item","post","response","statusText","length","Update","put","Delete","delete","GetBeforeImage","GetAfterImage","CreateBeforeImage","image","undefined","CreateAfterImage","DeleteBeforeImage","DeleteAfterImage","companyId","surveyHeaderId","customerId","locationId","productId","surveyId","userId","CreateBulk","UpdateBulk","DeleteBulk","GetCurrentUser","app","blockUIConfig","delay","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","run","$rootScope","$state","UserService","RoleService","UserRoleService","UserId","Name","==","and","RoleId","Id","go","redirectState","moment","controller","$scope","CompanyApplicationService","SurveyApplicationService","Route","toastr","$stateParams","$routeParams","$location","CompanyService","Init","Save","$parent","alert","p1","Predicate","p2","items","Select","Edit","reload","LocationService","CompanyId","CustomerService","ProductService","QuestionService","SurveyService","SurveyCustomerLocationService","SearchCustomers","value","SelectCustomer","model","label","CustomerId","SearchLocations","SelectLocation","LocationId","SurveyId","SurveyProductQuestionService","SearchProducts","SelectProduct","ProductId","SearchQuestions","SelectQuestion","QuestionId","Roles","Customers","Validate","Role","Customer","RedirectState","IsAdministrator","SelectedLocation","Location","SelectedCustomer","Survey","companies","map","e","in","Company","SelectCompany","CustomerSearch","or","roles","customers","LocationSearch","SurveySearch","p3","SelectSurvey","IsGoShown","IsGoDisabled","SurveyHeaderService","SurveyDetailService","ImageService","BeforeImage","AfterImage","Header","Latitude","Longitude","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Detail","setBeforeImage","element","reader","FileReader","files","onload","event","target","result","$apply","readAsDataURL","setAfterImage","promises","details","Answer","Details","Product","Question","fileSizeBeforeImage","fileSizeAfterImage","size","document","querySelector","empty","uiGridConstants","grid","options","showGridFooter","enableFiltering","enableSorting","headerTooltip","onRegisterApi","gridApi","enableGridMenu","exporterCsvFilename","exporterPdfOrientation","exporterPdfPageSize","exporterPdfMaxGridWidth","columnDefs","field","displayName","width","cellTemplate","ReportService","gridOptions","cellTooltip","keys","obj","includes","row","index","indexOf","splice","GoTo","NgMap","MapService","SelectedPosition","p4","positions","getMap","SelectPosition","panTo","lat","lng","SelectMarker","marker"],"mappings":"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","file":"app.min.js","sourcesContent":["\r\n(function() {\r\n    'use strict';\r\n    var services = angular.module('ApplicationServices', []);\r\n})();","angular.module('ApplicationServices').service('CompanyApplicationService', function () {\r\n    \r\n    var observers = [];\r\n    this.RegisterObserver = function (callback) {\r\n        observers.push(callback);\r\n    }\r\n\r\n    this.NotifyObservers = function () {\r\n        angular.forEach(observers, function (callback) {\r\n            callback();\r\n        });\r\n    };\r\n\r\n    this.SelectedCompany = null;\r\n    this.GetSelectedCompany = function () {\r\n        return SelectedCompany;\r\n    };\r\n\r\n    this.SetSelectedCompany = function (company) {\r\n        this.SelectedCompany = company;\r\n        this.NotifyObservers();\r\n    }\r\n});","angular.module('ApplicationServices').service('SurveyApplicationService', function () {\r\n    \r\n    var observers = [];\r\n    this.RegisterObserver = function (callback) {\r\n        observers.push(callback);\r\n    }\r\n\r\n    this.NotifyObservers = function () {\r\n        angular.forEach(observers, function (callback) {\r\n            callback();\r\n        });\r\n    };\r\n\r\n    this.SelectedSurvey = null;\r\n    this.GetSelectedCompany = function () {\r\n        return SelectedSurvey;\r\n    };\r\n\r\n    this.SetSelectedSurvey = function (survey) {\r\n        this.SelectedSurvey = survey;\r\n        this.NotifyObservers();\r\n    }\r\n});","\r\n(function() {\r\n    'use strict';\r\n    var services = angular.module('DatabaseServices', []);\r\n})();","(function () {\r\n\r\n    angular.module('DatabaseServices').factory('breezeservice',\r\n    ['$http', '$q', '$timeout', 'breeze', service]);\r\n\r\n    function service($http, $q, $timeout, breeze) {\r\n        var serviceName = '/breeze'; // route to the same origin Web Api controller\r\n        var dataService = new breeze.DataService({\r\n            serviceName: serviceName,\r\n            hasServerMetadata: false  // don't ask the server for metadata\r\n        });\r\n        var metadataStore = new breeze.MetadataStore();\r\n        //manager.enableSaveQueuing(true);\r\n        metadataStore.importMetadata(window.breeze.metadata);\r\n        //var masterManager = new breeze.EntityManager(serviceName);\r\n        var manager = new breeze.EntityManager({\r\n            dataService: dataService,\r\n            metadataStore: metadataStore\r\n        });\r\n        var meta = manager.metadataStore;\r\n        meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"UserRoleViewModel\");\r\n        //meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"Company\");\r\n        //meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"AspNetUser\");\r\n        //meta.setEntityTypeForResourceName(\"UserRoleApi/Search\", \"AspNetRole\");\r\n\r\n        meta.setEntityTypeForResourceName(\"CompanyApi/Search\", \"CompanyViewModel\");\r\n        meta.setEntityTypeForResourceName(\"RoleApi/Search\", \"RoleViewModel\");\r\n        var service = {\r\n            executeQuery: executeQuery,\r\n            all: all\r\n        };\r\n        return service;\r\n\r\n        function executeQuery(query) {\r\n            return manager.executeQuery(query).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        function all() {\r\n            var query = breeze.EntityQuery\r\n                .from(resourceName);\r\n\r\n            return executeQuery(query);\r\n        }\r\n    }\r\n})();","window.breeze = window.breeze || {}; window.breeze.metadata = JSON.stringify(\n{\"schema\":{\"namespace\":\"Merchandiser\",\"alias\":\"Self\",\"annotation:UseStrongSpatialTypes\":\"false\",\"xmlns:annotation\":\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\",\"xmlns:customannotation\":\"http://schemas.microsoft.com/ado/2013/11/edm/customannotation\",\"xmlns\":\"http://schemas.microsoft.com/ado/2009/11/edm\",\"cSpaceOSpaceMapping\":\"[[\\\"Merchandiser.CompanyViewModel\\\",\\\"Merchandiser.Models.CompanyViewModel\\\"],[\\\"Merchandiser.RoleViewModel\\\",\\\"Merchandiser.Models.RoleViewModel\\\"],[\\\"Merchandiser.UserRoleViewModel\\\",\\\"Merchandiser.Models.UserRoleViewModel\\\"],[\\\"Merchandiser.CustomerViewModel\\\",\\\"Merchandiser.Models.CustomerViewModel\\\"],[\\\"Merchandiser.UserViewModel\\\",\\\"Merchandiser.Models.UserViewModel\\\"]]\",\"entityType\":[{\"name\":\"CompanyViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.CompanyViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"Name\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"Created\",\"type\":\"Edm.DateTime\",\"nullable\":\"false\"},{\"name\":\"CreatedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"ModifiedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]},{\"name\":\"RoleViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.RoleViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\",\"nullable\":\"false\"},{\"name\":\"Name\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]},{\"name\":\"UserRoleViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.UserRoleViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"UserId\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"RoleId\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"CompanyId\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"CustomerId\",\"type\":\"Edm.Guid\"}],\"navigationProperty\":[{\"name\":\"Company\",\"relationship\":\"Self.UserRoleViewModel_Company\",\"fromRole\":\"UserRoleViewModel_Company_Source\",\"toRole\":\"UserRoleViewModel_Company_Target\"},{\"name\":\"Customer\",\"relationship\":\"Self.UserRoleViewModel_Customer\",\"fromRole\":\"UserRoleViewModel_Customer_Source\",\"toRole\":\"UserRoleViewModel_Customer_Target\"},{\"name\":\"Role\",\"relationship\":\"Self.UserRoleViewModel_Role\",\"fromRole\":\"UserRoleViewModel_Role_Source\",\"toRole\":\"UserRoleViewModel_Role_Target\"},{\"name\":\"User\",\"relationship\":\"Self.UserRoleViewModel_User\",\"fromRole\":\"UserRoleViewModel_User_Source\",\"toRole\":\"UserRoleViewModel_User_Target\"}]},{\"name\":\"CustomerViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.CustomerViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"CompanyId\",\"type\":\"Edm.Guid\",\"nullable\":\"false\"},{\"name\":\"Name\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"Created\",\"type\":\"Edm.DateTime\",\"nullable\":\"false\"},{\"name\":\"CreatedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"},{\"name\":\"ModifiedBy\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]},{\"name\":\"UserViewModel\",\"customannotation:ClrType\":\"Merchandiser.Models.UserViewModel, Merchandiser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\"key\":{\"propertyRef\":{\"name\":\"Id\"}},\"property\":[{\"name\":\"Id\",\"type\":\"Edm.String\",\"maxLength\":\"128\",\"fixedLength\":\"false\",\"unicode\":\"true\",\"nullable\":\"false\"},{\"name\":\"UserName\",\"type\":\"Edm.String\",\"maxLength\":\"Max\",\"fixedLength\":\"false\",\"unicode\":\"true\"}]}],\"association\":[{\"name\":\"UserRoleViewModel_Company\",\"end\":[{\"role\":\"UserRoleViewModel_Company_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_Company_Target\",\"type\":\"Edm.Self.CompanyViewModel\",\"multiplicity\":\"1\",\"onDelete\":{\"action\":\"Cascade\"}}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_Company_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_Company_Source\",\"propertyRef\":{\"name\":\"CompanyId\"}}}},{\"name\":\"UserRoleViewModel_Customer\",\"end\":[{\"role\":\"UserRoleViewModel_Customer_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_Customer_Target\",\"type\":\"Edm.Self.CustomerViewModel\",\"multiplicity\":\"0..1\"}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_Customer_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_Customer_Source\",\"propertyRef\":{\"name\":\"CustomerId\"}}}},{\"name\":\"UserRoleViewModel_Role\",\"end\":[{\"role\":\"UserRoleViewModel_Role_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_Role_Target\",\"type\":\"Edm.Self.RoleViewModel\",\"multiplicity\":\"0..1\"}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_Role_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_Role_Source\",\"propertyRef\":{\"name\":\"RoleId\"}}}},{\"name\":\"UserRoleViewModel_User\",\"end\":[{\"role\":\"UserRoleViewModel_User_Source\",\"type\":\"Edm.Self.UserRoleViewModel\",\"multiplicity\":\"*\"},{\"role\":\"UserRoleViewModel_User_Target\",\"type\":\"Edm.Self.UserViewModel\",\"multiplicity\":\"0..1\"}],\"referentialConstraint\":{\"principal\":{\"role\":\"UserRoleViewModel_User_Target\",\"propertyRef\":{\"name\":\"Id\"}},\"dependent\":{\"role\":\"UserRoleViewModel_User_Source\",\"propertyRef\":{\"name\":\"UserId\"}}}}],\"entityContainer\":{\"name\":\"DatabaseContext\",\"customannotation:UseClrTypes\":\"true\",\"entitySet\":[{\"name\":\"CompanyViewModel\",\"entityType\":\"Self.CompanyViewModel\"},{\"name\":\"RoleViewModel\",\"entityType\":\"Self.RoleViewModel\"},{\"name\":\"UserRoleViewModel\",\"entityType\":\"Self.UserRoleViewModel\"},{\"name\":\"CustomerViewModels\",\"entityType\":\"Self.CustomerViewModel\"},{\"name\":\"UserViewModels\",\"entityType\":\"Self.UserViewModel\"}],\"associationSet\":[{\"name\":\"UserRoleViewModel_Company\",\"association\":\"Self.UserRoleViewModel_Company\",\"end\":[{\"role\":\"UserRoleViewModel_Company_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_Company_Target\",\"entitySet\":\"CompanyViewModel\"}]},{\"name\":\"UserRoleViewModel_Customer\",\"association\":\"Self.UserRoleViewModel_Customer\",\"end\":[{\"role\":\"UserRoleViewModel_Customer_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_Customer_Target\",\"entitySet\":\"CustomerViewModels\"}]},{\"name\":\"UserRoleViewModel_Role\",\"association\":\"Self.UserRoleViewModel_Role\",\"end\":[{\"role\":\"UserRoleViewModel_Role_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_Role_Target\",\"entitySet\":\"RoleViewModel\"}]},{\"name\":\"UserRoleViewModel_User\",\"association\":\"Self.UserRoleViewModel_User\",\"end\":[{\"role\":\"UserRoleViewModel_User_Source\",\"entitySet\":\"UserRoleViewModel\"},{\"role\":\"UserRoleViewModel_User_Target\",\"entitySet\":\"UserViewModels\"}]}]}}}\n);\r\n","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('CustomerService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('CustomerApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.SearchJson = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n\r\n            var query = new breeze.EntityQuery({\r\n                from: \"CustomerApi/Search\",\r\n                where: predicate,\r\n                orderBy: [\"Created desc\"],\r\n                skip: page * pageSize,\r\n                take: pageSize\r\n            });\r\n\r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n\r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/CustomerApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/CustomerApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/CustomerApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/CustomerApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('CompanyService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('CompanyApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.SearchJson = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n\r\n            var query = new breeze.EntityQuery({\r\n                from: \"CompanyApi/Search\",\r\n                where: predicate,\r\n                orderBy: [\"Created desc\"],\r\n                skip: page * pageSize,\r\n                take: pageSize\r\n            });\r\n\r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n\r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/CompanyApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/CompanyApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/CompanyApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/CompanyApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('CompanyUserService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('CompanyUserApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/CompanyUserApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/CompanyUserApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.put('/breeze/CompanyUserApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/CompanyUserApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('ImageService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.GetBeforeImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/ImageApi/GetBeforeImage/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.GetAfterImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/ImageApi/GetBeforeImage/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.CreateBeforeImage = function (image, id) {\r\n                var deferred = $q.defer();\r\n                if (image != undefined && image != null) {\r\n                    $http.post('/api/v1/ImageApi/CreateBeforeImage/' + id, image)\r\n                    .then(function (response) {\r\n                        deferred.resolve(response);\r\n                    }, function (response) {\r\n                        if (response.statusText.length > 0) {\r\n                            deferred.reject(response.statusText);\r\n                        } else {\r\n                            deferred.reject(\"Failed to create the record.\");\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    deferred.resolve();\r\n                }\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.CreateAfterImage = function (image, id) {\r\n                var deferred = $q.defer();\r\n                if (image != undefined && image != null) {\r\n                    $http.post('/api/v1/ImageApi/CreateAfterImage/' + id, image)\r\n                    .then(function (response) {\r\n                        deferred.resolve(response);\r\n                    }, function (response) {\r\n                        if (response.statusText.length > 0) {\r\n                            deferred.reject(response.statusText);\r\n                        } else {\r\n                            deferred.reject(\"Failed to create the record.\");\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    deferred.resolve();\r\n                }\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.DeleteBeforeImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/api/v1/ImageApi/DeleteBeforeImage/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.DeleteAfterImage = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/api/v1/ImageApi/DeleteAfterImage/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('LocationService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('LocationApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/LocationApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/LocationApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/LocationApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/LocationApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('MapService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('MapApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n            \r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('ProductService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('ProductApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/ProductApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/ProductApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/ProductApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/ProductApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('QuestionService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('QuestionApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/QuestionApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/QuestionApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/QuestionApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/QuestionApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('ReportService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (companyId,surveyHeaderId,customerId,locationId,productId,surveyId, userId, page,pageSize) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/ReportApi/Search/' + companyId + '/' + surveyHeaderId + '/' + customerId + '/' + locationId + '/' +\r\n                        productId + '/' + surveyId + '/' + userId + '/' + page + '/' + pageSize + '/',\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('RoleService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('RoleApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.skip(page * pageSize).take(pageSize);\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.SearchJson = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n\r\n                var query = new breeze.EntityQuery({\r\n                    from: \"RoleApi/Search\",\r\n                    where: predicate,\r\n                    //orderBy: [\"Created desc\"],\r\n                    skip: page * pageSize,\r\n                    take: pageSize\r\n                });\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyCustomerLocationService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyCustomerLocationApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyCustomerLocationApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyCustomerLocationApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyCustomerLocationApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyCustomerLocationApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyDetailService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyDetailApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyDetailApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyDetailApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyDetailApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyDetailApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyHeaderService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('SurveyHeaderApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Get = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/breeze/SurveyHeaderApi/Get/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Create = function (item) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.post('/breeze/SurveyHeaderApi/Create', item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response.statusText);\r\n                    } else {\r\n                        deferred.reject(\"Failed to create the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.CreateBulk = function (item) {\r\n                var deferred = $q.defer();\r\n                $http.post('/breeze/SurveyHeaderApi/CreateBulk', item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response.statusText);\r\n                    } else {\r\n                        deferred.reject(\"Failed to create the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n\r\n\r\n            this.Update = function (id, item) {\r\n                var deferred = $q.defer();\r\n                $http.put('/breeze/SurveyHeaderApi/Update/' + id, item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to update the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.UpdateBulk = function (id, item) {\r\n                var deferred = $q.defer();\r\n                $http.put('/breeze/SurveyHeaderApi/UpdateBulk/' + id, item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to update the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.Delete = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/breeze/SurveyHeaderApi/Delete/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            this.DeleteBulk = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/breeze/SurveyHeaderApi/DeleteBulk/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('SurveyProductQuestionService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n        var _self = this;\r\n        this.deferredRequest = null;\r\n\r\n        this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n            cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n            if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                this.deferredRequest = null;\r\n            }\r\n            var deferred = $q.defer();\r\n            var query = breeze.EntityQuery.from('SurveyProductQuestionApi/Search');\r\n            if (predicate != null) {\r\n                query = query.where(predicate);\r\n            }\r\n            query = query.orderByDesc('Created').skip(page * pageSize).take(pageSize);\r\n                        \r\n            breezeservice.executeQuery(query).then(function (data) {\r\n                deferred.resolve(data.httpResponse.data);\r\n                _self.deferredRequest = null;\r\n            }, function (msg, code) {\r\n                deferred.reject(msg);\r\n                _self.deferredRequest = null;\r\n            });\r\n            \r\n            this.deferredRequest = deferred;\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Get = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http({\r\n                method: 'Get',\r\n                url: '/breeze/SurveyProductQuestionApi/Get/' + id,\r\n            }).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (msg, code) {\r\n                deferred.reject(msg);\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Create = function (item) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.post('/breeze/SurveyProductQuestionApi/Create', item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response.statusText);\r\n                } else {\r\n                    deferred.reject(\"Failed to create the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.Update = function (id, item) {\r\n            var deferred = $q.defer();\r\n            $http.put('/breeze/SurveyProductQuestionApi/Update/' + id, item)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to update the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        this.Delete = function (id) {\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete('/breeze/SurveyProductQuestionApi/Delete/' + id)\r\n            .then(function (response) {\r\n                deferred.resolve(response);\r\n            }, function (response) {\r\n                if (response.statusText.length > 0) {\r\n                    deferred.reject(response);\r\n                } else {\r\n                    deferred.reject(\"Failed to delete the record.\");\r\n                }\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('UserService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.GetCurrentUser = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/api/v1/UserApi/GetCurrentUser/',\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n        }]);\r\n})();","(function () {\r\n    \"use strict\";\r\n    angular.module('DatabaseServices')\r\n    .service('UserRoleService', ['$http', '$q', 'breeze', 'breezeservice',\r\n        function ($http, $q, breeze, breezeservice) {\r\n            var _self = this;\r\n            this.deferredRequest = null;\r\n\r\n            this.Search = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n                var query = breeze.EntityQuery.from('UserRoleApi/Search');\r\n                if (predicate != null) {\r\n                    query = query.where(predicate);\r\n                }\r\n                query = query.skip(page * pageSize).take(pageSize);\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.SearchJson = function (predicate, page, pageSize, cancelExistingSearch) {\r\n                cancelExistingSearch = cancelExistingSearch || false;\r\n\r\n                if (this.deferredRequest !== null && cancelExistingSearch) {\r\n                    this.deferredRequest.reject(\"Cancelled Search Request.\");\r\n                    this.deferredRequest = null;\r\n                }\r\n                var deferred = $q.defer();\r\n\r\n                var query = new breeze.EntityQuery({\r\n                    from: \"UserRoleApi/Search\",\r\n                    where: predicate,\r\n                    //orderBy: [\"Created desc\"],\r\n                    skip: page * pageSize,\r\n                    take: pageSize\r\n                });\r\n\r\n                breezeservice.executeQuery(query).then(function (data) {\r\n                    deferred.resolve(data.httpResponse.data);\r\n                    _self.deferredRequest = null;\r\n                }, function (msg, code) {\r\n                    deferred.reject(msg);\r\n                    _self.deferredRequest = null;\r\n                });\r\n\r\n                this.deferredRequest = deferred;\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Get = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http({\r\n                    method: 'Get',\r\n                    url: '/breeze/UserRoleApi/Get/' + id,\r\n                }).success(function (data, status, headers, config) {\r\n                    deferred.resolve(data);\r\n                }).error(function (msg, code) {\r\n                    deferred.reject(msg);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Create = function (item) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.post('/breeze/UserRoleApi/Create', item)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response.statusText);\r\n                    } else {\r\n                        deferred.reject(\"Failed to create the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            this.Delete = function (id) {\r\n                var deferred = $q.defer();\r\n\r\n                $http.delete('/breeze/UserRoleApi/Delete/' + id)\r\n                .then(function (response) {\r\n                    deferred.resolve(response);\r\n                }, function (response) {\r\n                    if (response.statusText.length > 0) {\r\n                        deferred.reject(response);\r\n                    } else {\r\n                        deferred.reject(\"Failed to delete the record.\");\r\n                    }\r\n                });\r\n\r\n                return deferred.promise;\r\n            }\r\n           \r\n        }]);\r\n})();","var app = angular.module('Main', ['ngRoute', 'ui.grid', 'ui.bootstrap', 'ngAnimate','ngTouch', 'ui.router', 'ngMap', 'ui.grid.exporter', 'blockUI', 'breeze.angular', 'DatabaseServices', 'ApplicationServices']);\r\nangular.module('Main').config(function (blockUIConfig) {\r\n    // Change the default delay to 100ms before the blocking is visible\r\n    blockUIConfig.delay = 0;\r\n});\r\napp.config(function ($stateProvider, $urlRouterProvider) {\r\n    // For any unmatched url, send to /route1\r\n    $urlRouterProvider.otherwise(\"/main/company/addedit/\")\r\n\r\n    $stateProvider\r\n        .state('main', {\r\n            url: \"/main\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Main/Views/Main.html\"\r\n        })\r\n        .state('main.company', {\r\n            url: \"/company\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Company/Views/Company.html\"\r\n        })\r\n        .state('main.company.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Company/Views/CompanyAddEdit.html\",\r\n        })\r\n        .state('main.customer', {\r\n            url: \"/customer\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Customer/Views/Customer.html\"\r\n        })\r\n        .state('main.customer.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Customer/Views/CustomerAddEdit.html\",\r\n        })\r\n        .state('main.product', {\r\n            url: \"/product\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Product/Views/Product.html\"\r\n        })\r\n        .state('main.product.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Product/Views/ProductAddEdit.html\",\r\n        })\r\n        .state('main.location', {\r\n            url: \"/location\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Location/Views/Location.html\"\r\n        })\r\n        .state('main.location.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Location/Views/LocationAddEdit.html\",\r\n        })\r\n        .state('main.survey', {\r\n            url: \"/survey\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Survey/Views/Survey.html\"\r\n        })\r\n        .state('main.survey.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Survey/Views/SurveyAddEdit.html\",\r\n        })\r\n        .state('main.userrole', {\r\n            url: \"/userrole\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/UserRole/Views/UserRole.html\"\r\n        })\r\n        .state('main.userrole.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/UserRole/Views/UserRoleAddEdit.html\",\r\n        })\r\n        .state('main.question', {\r\n            url: \"/question\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Question/Views/Question.html\"\r\n        })\r\n        .state('main.question.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/Question/Views/QuestionAddEdit.html\",\r\n        })\r\n        .state('main.surveycustomerlocation', {\r\n            url: \"/survey/customerlocation\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyCustomerLocation/Views/SurveyCustomerLocation.html\"\r\n        })\r\n        .state('main.surveycustomerlocation.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyCustomerLocation/Views/SurveyCustomerLocationAddEdit.html\",\r\n        })\r\n        .state('main.surveyproductquestion', {\r\n            url: \"/survey/productquestion\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyProductQuestion/Views/SurveyProductQuestion.html\"\r\n        })\r\n        .state('main.surveyproductquestion.addedit', {\r\n            url: \"/addedit/:id\",\r\n            templateUrl: \"/App/ApplicationComponents/Administrator/SurveyProductQuestion/Views/SurveyProductQuestionAddEdit.html\",\r\n        })\r\n});\r\napp.run(function ($rootScope, $state, UserService, RoleService, UserRoleService) {\r\n    UserService.GetCurrentUser().then(function (data) {\r\n        $rootScope.UserId = data;\r\n        var predicate = { \"Name\": { \"==\": \"Administrator\" } };\r\n        RoleService.SearchJson(predicate, 0, 1, false).then(function (data) {\r\n            var predicate = {\r\n                and: [\r\n                   { \"UserId\": { \"==\": $rootScope.UserId } },\r\n                   { \"RoleId\": { '==': data[0].Id } }\r\n                ]\r\n            }\r\n            UserRoleService.SearchJson(predicate, 0, 100, false).then(function (data) {\r\n                if (data.length > 0) {\r\n                    $state.go('main.company.addedit');\r\n                }\r\n                else {\r\n                    $state.go('merchandise', {\r\n                        redirectState: 'reportmain'\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    });\r\n});","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('MainController', ['$scope', '$state', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, CompanyApplicationService, SurveyApplicationService) {      \r\n        //TODO: If a regular user go to company, if a company customer assigned to a survey, go to the survey data page.\r\n        $scope.SelectedCompany = null;\r\n        CompanyApplicationService.RegisterObserver(function () { \r\n            $scope.SelectedCompany = CompanyApplicationService.SelectedCompany;\r\n        })\r\n\r\n        $scope.SelectedSurvey = null;\r\n        SurveyApplicationService.RegisterObserver(function(){\r\n            $scope.SelectedSurvey = SurveyApplicationService.SelectedSurvey;\r\n        })\r\n\r\n        $scope.Route = function (state) {\r\n            if (state == \"main.company.addedit\") {\r\n                $state.go(state);\r\n            }\r\n            else {\r\n                if (state == \"main.surveycustomerlocation.addedit\" || state == \"main.surveyproductquestion.addedit\") {\r\n                    if (SurveyApplicationService.SelectedSurvey == undefined || SurveyApplicationService.SelectedSurvey == null || SurveyApplicationService.SelectedSurvey == \"\") {\r\n                        toastr.error(\"A survey must be selected first.\");\r\n                    }\r\n                    else {\r\n                        $state.go(state);\r\n                    }\r\n                }\r\n                else {\r\n                    if (CompanyApplicationService.SelectedCompany == undefined || CompanyApplicationService.SelectedCompany == null || CompanyApplicationService.SelectedCompany == \"\") {\r\n                        toastr.error(\"A company must be selected first.\");\r\n                    }\r\n                    else {\r\n                        $state.go(state);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CompanyAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CompanyService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, CompanyService) {\r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                CompanyService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                CompanyService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                CompanyService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CompanyController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CompanyService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, CompanyService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('Quantity', '>', 1);\r\n            var p2 = new breeze.Predicate('Longitude', '<', 1);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            CompanyService.Search(null, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n                if (data.length == 1) {\r\n                    $scope.Select(data[0].Id);\r\n                }\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.company.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            CompanyService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n        \r\n        $scope.Select = function (Id) {\r\n            CompanyService.Get(Id).then(function (data) {\r\n                CompanyApplicationService.SetSelectedCompany(data);\r\n            });\r\n        }\r\n        \r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('LocationAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'LocationService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, LocationService, CompanyApplicationService, SurveyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n        SurveyApplicationService.NotifyObservers();\r\n        \r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                LocationService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                LocationService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                LocationService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('LocationController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'LocationService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, LocationService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            LocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.location.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            LocationService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CustomerAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CustomerService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, CustomerService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                CustomerService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                CustomerService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                CustomerService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('CustomerController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'CustomerService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, CustomerService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            CustomerService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.customer.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            CustomerService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('ProductAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'ProductService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, ProductService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();        \r\n        \r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                ProductService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                ProductService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                debugger;\r\n                ProductService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('ProductController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'ProductService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, ProductService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            ProductService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.product.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            ProductService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('QuestionAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'QuestionService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, QuestionService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();        \r\n        \r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                QuestionService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                QuestionService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                 $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                QuestionService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('QuestionController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'QuestionService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, QuestionService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            QuestionService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.question.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            QuestionService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n        \r\n        $scope.Init = function(){\r\n            $scope.item = { Id : null, Name : \"\"}\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                SurveyService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                SurveyService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                SurveyService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyService, CompanyApplicationService, SurveyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            SurveyService.Search(predicate, 0, 20, false).then(function (data) {\r\n                $scope.items = data;\r\n                if (data.length == 1) {\r\n                    $scope.Select(data[0].Id);\r\n                }\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.survey.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            SurveyService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n\r\n        $scope.Select = function (Id) {\r\n            SurveyService.Get(Id).then(function (data) {\r\n                SurveyApplicationService.SetSelectedSurvey(data);\r\n            });\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyCustomerLocationAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyCustomerLocationService',\r\n        'CompanyApplicationService', 'SurveyApplicationService', 'CustomerService', 'LocationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyCustomerLocationService,\r\n        CompanyApplicationService, SurveyApplicationService, CustomerService, LocationService) {\r\n\r\n        CompanyApplicationService.NotifyObservers();\r\n        SurveyApplicationService.NotifyObservers();\r\n\r\n        $scope.Init = function(){\r\n            $scope.item = { Id : null }\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                SurveyCustomerLocationService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.SearchCustomers = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return CustomerService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectCustomer = function (item, model, label) {\r\n            $scope.item.CustomerId = item.Id;\r\n        }\r\n\r\n        $scope.SearchLocations = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return LocationService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectLocation = function (item, model, label) {\r\n            $scope.item.LocationId = item.Id;\r\n        }\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                SurveyCustomerLocationService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                    //$state.go('main.surveycustomerlocation.addedit', { }, { reload: true, inherit: false });\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                $scope.item.SurveyId = SurveyApplicationService.SelectedSurvey.Id;\r\n                SurveyCustomerLocationService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                    //$state.go('main.surveycustomerlocation.addedit', {}, { reload: true, inherit: false });\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyCustomerLocationController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyCustomerLocationService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyCustomerLocationService, CompanyApplicationService, SurveyApplicationService) {\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('SurveyId', '==', SurveyApplicationService.SelectedSurvey.Id);\r\n            //var p2 = new breeze.Predicate('Longitude', '<', 1);\r\n            //var predicate = new breeze.Predicate.and([p1, p2]);\r\n            SurveyCustomerLocationService.Search(p1, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.surveycustomerlocation.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            SurveyCustomerLocationService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyProductQuestionAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyProductQuestionService',\r\n        'CompanyApplicationService', 'SurveyApplicationService', 'ProductService','QuestionService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyProductQuestionService,\r\n        CompanyApplicationService, SurveyApplicationService, ProductService, QuestionService) {\r\n\r\n        CompanyApplicationService.NotifyObservers();\r\n        SurveyApplicationService.NotifyObservers();\r\n\r\n        $scope.Init = function(){\r\n            $scope.item = { Id : null }\r\n        }\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                SurveyProductQuestionService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.SearchProducts = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return ProductService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectProduct = function (item, model, label) {\r\n            $scope.item.ProductId = item.Id;\r\n        }\r\n\r\n        $scope.SearchQuestions = function (value) {\r\n            var p1 = new breeze.Predicate('Name', \"substringof\", value);\r\n            var p2 = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            return QuestionService.Search(predicate, 0, 20, false).then(function (data) {\r\n                return data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectQuestion = function (item, model, label) {\r\n            $scope.item.QuestionId = item.Id;\r\n        }\r\n\r\n        $scope.Save = function () {\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                SurveyProductQuestionService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                $scope.item.SurveyId = SurveyApplicationService.SelectedSurvey.Id;\r\n                SurveyProductQuestionService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('SurveyProductQuestionController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'SurveyProductQuestionService', 'CompanyApplicationService', 'SurveyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, SurveyProductQuestionService, CompanyApplicationService, SurveyApplicationService) {\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('SurveyId', '==', SurveyApplicationService.SelectedSurvey.Id);\r\n            //var p2 = new breeze.Predicate('Longitude', '<', 1);\r\n            //var predicate = new breeze.Predicate.and([p1, p2]);\r\n            SurveyProductQuestionService.Search(p1, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.surveyproductquestion.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            SurveyProductQuestionService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').controller('UserRoleAddEditController', ['$scope', '$state', '$stateParams', '$routeParams', '$http', '$location',\r\n        '$timeout', 'breezeservice', 'breeze', 'UserRoleService', 'CustomerService', 'RoleService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $routeParams, $http, $location,\r\n        $timeout, breezeservice, breeze, UserRoleService, CustomerService, RoleService, CompanyApplicationService) {\r\n        CompanyApplicationService.NotifyObservers();\r\n\r\n        $scope.Init = function () {\r\n            $scope.item = { Id: null, Name: \"\" }\r\n        }\r\n        $scope.Init();\r\n        $scope.Search = function () {\r\n            if ($stateParams.id !== undefined && $stateParams.id !== \"\") {\r\n                UserRoleService.Get($stateParams.id).then(function (data) {\r\n                    $scope.item = data;\r\n                });\r\n            }\r\n            RoleService.Search(null, 0, 5, false).then(function (data) {\r\n                $scope.Roles = data;\r\n            });\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            CustomerService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Customers = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Save = function () {\r\n            if (!$scope.Validate()) {\r\n                return false;\r\n            }\r\n            if ($scope.item.Id !== undefined && $scope.item.Id !== null && $scope.item.Id !== \"\") {\r\n                UserRoleService.Update($scope.item.Id, $scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    alert(error);\r\n                });\r\n            }\r\n            else {\r\n                $scope.item.CompanyId = CompanyApplicationService.SelectedCompany.Id;\r\n                $scope.item.RoleId = $scope.item.Role.Id;\r\n                if ($scope.item.Customer != undefined) {\r\n                    $scope.item.CustomerId = $scope.item.Customer.Id;\r\n                }\r\n                UserRoleService.Create($scope.item).then(function (data) {\r\n                    $scope.$parent.Search();\r\n                    $scope.Init();\r\n                }, function (error) {\r\n                    toastr.error(\"The username does not exist.\");\r\n                });\r\n            }\r\n        }\r\n\r\n        $scope.Validate = function () {\r\n            if ($scope.item.Role.Name == \"Customer\" && $scope.item.Customer == null) {\r\n                toastr.error(\"A customer must be selected.\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";    \r\n    angular.module('Main').controller('UserRoleController', ['$scope', '$state', '$routeParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze', 'UserRoleService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $routeParams, $http, $location, $timeout, breezeservice, breeze, UserRoleService, CompanyApplicationService) {\r\n        $scope.Search = function () {\r\n            var predicate = new breeze.Predicate('CompanyId', '==', CompanyApplicationService.SelectedCompany.Id);\r\n            UserRoleService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.items = data;\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.Edit = function (Id) {\r\n            $state.go('main.userrole.addedit', { id: Id }, { reload: false });\r\n        }\r\n\r\n        $scope.Delete = function (Id) {\r\n            UserRoleService.Delete(Id).then(function (data) {\r\n                $scope.Search();\r\n            })\r\n        }\r\n    }]);\r\n\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('merchandise', {\r\n            url: \"/merchandise/:redirectState\",\r\n            templateUrl: \"/App/ApplicationComponents/DataEntry/CustomerLocation/MerchandiseCustomerLocation.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MerchandiseCustomerLocationController', ['$scope', '$state', '$stateParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze',\r\n        'CompanyService', 'LocationService', 'CustomerService', 'SurveyService', 'UserService', 'UserRoleService',\r\n        'RoleService', 'SurveyCustomerLocationService', 'CompanyApplicationService',\r\n    function controller($scope, $state, $stateParams, $http, $location, $timeout, breezeservice, breeze,\r\n        CompanyService, LocationService, CustomerService, SurveyService, UserService, UserRoleService,\r\n        RoleService, SurveyCustomerLocationService, CompanyApplicationService) {\r\n        $scope.RedirectState = $stateParams.redirectState;\r\n        $scope.SelectedCompany = { Id: null };\r\n        $scope.IsAdministrator = false;\r\n        $scope.SelectedLocation = { Location: { Id: null }, Id: null };\r\n        $scope.SelectedCustomer = { Customer: { Id: null }, Id: null };\r\n        $scope.SelectedSurvey = { Survey: { Id: null }, Id: null };\r\n        $scope.UserId = null;\r\n        $scope.Search = function () {\r\n            UserService.GetCurrentUser().then(function (data) {\r\n                $scope.UserId = data;\r\n                var predicate = { \"UserId\": { \"==\": data } };\r\n                UserRoleService.SearchJson(predicate, 0, 100, false).then(function (data) {\r\n                    var companies = data.map(function (e) { return e.CompanyId; });\r\n                    CompanyService.SearchJson({ \"Id\": { in: companies } }, 0, 20, false).then(function (data) {\r\n                        if (data.length == 1) {\r\n                            $scope.Company = data;\r\n                            $scope.SelectedCompany = data[0];\r\n                            $scope.SelectCompany();\r\n                        }\r\n                        else {\r\n                            $scope.Company = data;\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.SelectCompany = function () {\r\n            $scope.CustomerSearch($scope.SelectedCompany.Id);\r\n        }\r\n\r\n        $scope.CustomerSearch = function (companyId) {\r\n            var predicate = {\r\n                or: [\r\n                   { \"Name\": { '==': \"Administrator\" } },\r\n                   { \"Name\": { '==': \"Data Entry\" } }\r\n                ]\r\n            }\r\n            RoleService.SearchJson(predicate, 0, 2, false).then(function (data) {\r\n                var roles = data.map(function (e) { return e.Id; });\r\n                var predicate = {\r\n                    and: [\r\n                       { \"UserId\": { '==': $scope.UserId } },\r\n                       { \"RoleId\": { in: roles } },\r\n                       { \"CompanyId\": { '==': companyId } }\r\n                    ]\r\n                }\r\n                UserRoleService.SearchJson(predicate, 0, 100, false).then(function (data) {\r\n                    //Admin for the selected company show all customers\r\n                    if (data.length > 0) {\r\n                        $scope.IsAdministrator = true;\r\n                        var predicate = new breeze.Predicate('CompanyId', '==', companyId);\r\n                        SurveyCustomerLocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                            $scope.Customer = data;\r\n                        });\r\n                    }\r\n                    //Not an admin so must be a customer so only show customers they are associated with.\r\n                    else {\r\n                        var predicate = {\r\n                            and: [\r\n                               { \"UserId\": { \"==\": $scope.UserId } },\r\n                               { \"CompanyId\": { '==': companyId } }\r\n                            ]\r\n                        }\r\n                        UserRoleService.SearchJson(predicate, 0, 100, false).then(function (data) {\r\n                            var customers = data.map(function (e) { return e.CustomerId; });\r\n                            CustomerService.SearchJson({ \"Id\": { in: customers } }, 0, 20, false).then(function (data) {\r\n                                $scope.Customer = data;\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });         \r\n        }\r\n\r\n        $scope.SelectCustomer = function () {\r\n            $scope.LocationSearch($scope.SelectedCompany.Id, $scope.SelectedCustomer.Customer.Id);\r\n        }\r\n\r\n        $scope.LocationSearch = function (companyId, customerId) {\r\n            var p1 = new breeze.Predicate('CompanyId', '==', companyId);\r\n            var p2 = new breeze.Predicate('CustomerId', '==', customerId);\r\n            var predicate = new breeze.Predicate.and([p1, p2]);\r\n            SurveyCustomerLocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Location = data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectLocation = function () {\r\n            $scope.SurveySearch($scope.SelectedCompany.Id, $scope.SelectedLocation.Location.Id, $scope.SelectedCustomer.Customer.Id);\r\n        }\r\n\r\n        $scope.SurveySearch = function (companyId, locationId, customerId) {\r\n            var p1 = new breeze.Predicate('CompanyId', '==', companyId);\r\n            var p2 = new breeze.Predicate('LocationId', '==', locationId);\r\n            var p3 = new breeze.Predicate('CustomerId', '==', customerId);\r\n            var predicate = new breeze.Predicate.and([p1, p2, p3]);\r\n            SurveyCustomerLocationService.Search(predicate, 0, 100, false).then(function (data) {\r\n                $scope.Survey = data;\r\n            });\r\n        }\r\n\r\n        $scope.SelectSurvey = function () {\r\n            $state.go($stateParams.redirectState, {\r\n                companyId: $scope.SelectedCompany.Id, surveyId: $scope.SelectedSurvey.Survey.Id,\r\n                customerId: $scope.SelectedCustomer.Customer.Id, locationId: $scope.SelectedLocation.Location.Id\r\n            });\r\n        }\r\n\r\n        $scope.IsGoShown = function () {\r\n            if ($stateParams.redirectState == 'reportmain' || $stateParams.redirectState == 'map') {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        $scope.IsGoDisabled = function () {\r\n            if ($scope.SelectedCompany.Id != null) {\r\n                if ($scope.IsAdministrator == true) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    if ($scope.SelectCustomer.Id != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('survey', {\r\n            url: \"/survey/:companyId/:surveyId/:customerId/:locationId/:surveyHeaderId\",\r\n            templateUrl: \"/App/ApplicationComponents/DataEntry/Survey/MerchandiseSurvey.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MerchandiseSurveyController', ['$scope', '$q', '$state', '$stateParams', '$http', '$location', '$timeout', 'breezeservice', 'breeze',\r\n        'CompanyService', 'LocationService', 'CustomerService', 'SurveyService',\r\n        'UserService', 'SurveyCustomerLocationService', 'SurveyProductQuestionService', 'CompanyApplicationService', 'SurveyHeaderService', 'SurveyDetailService', 'ImageService',\r\n    function controller($scope, $q, $state, $stateParams, $http, $location, $timeout, breezeservice, breeze,\r\n        CompanyService, LocationService, CustomerService, SurveyService,\r\n        UserService, SurveyCustomerLocationService, SurveyProductQuestionService, CompanyApplicationService, SurveyHeaderService, SurveyDetailService, ImageService) {\r\n        $scope.BeforeImage = null;\r\n        $scope.AfterImage = null;\r\n        $scope.Header = {\r\n            BeforeImage: null, AfterImage: null, Latitude: null, Longitude: null,\r\n            CompanyId: $stateParams.companyId, SurveyId: $stateParams.surveyId,\r\n            CustomerId: $stateParams.customerId, LocationId: $stateParams.locationId\r\n        }\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            $scope.Header.Latitude = position.coords.latitude;\r\n            $scope.Header.Longitude = position.coords.longitude;\r\n        });\r\n        $scope.Detail = [];\r\n\r\n        $scope.Search = function () {\r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                var predicate = new breeze.Predicate('Id', '==', $stateParams.surveyHeaderId);\r\n                SurveyHeaderService.Search(predicate, 0, 1, false).then(function (data) {\r\n                    $scope.Header = data[0];\r\n                })\r\n                predicate = new breeze.Predicate('SurveyHeaderId', '==', $stateParams.surveyHeaderId);\r\n                SurveyDetailService.Search(predicate, 0, 100, false).then(function (data) {\r\n                    $scope.Detail = data;\r\n                });\r\n                $scope.BeforeImage = \"/api/v1/ImageApi/GetBeforeImage/\" + $stateParams.surveyHeaderId;\r\n                $scope.AfterImage = \"/api/v1/ImageApi/GetAfterImage/\" + $stateParams.surveyHeaderId;\r\n            }\r\n            else {\r\n                var predicate = new breeze.Predicate('SurveyId', '==', $stateParams.surveyId);\r\n                SurveyProductQuestionService.Search(predicate, 0, 100, false).then(function (data) {\r\n                    $scope.Detail = data;\r\n                });\r\n            }\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.setBeforeImage = function (element) {\r\n            var reader = new FileReader();\r\n            $scope.Header.BeforeImage = element.files[0];\r\n            reader.onload = function (event) {\r\n                $scope.BeforeImage = event.target.result;\r\n                $scope.$apply();\r\n            }\r\n            reader.readAsDataURL(element.files[0]);\r\n        }\r\n\r\n        $scope.setAfterImage = function (element) {\r\n            var reader = new FileReader();\r\n            $scope.Header.AfterImage = element.files[0];\r\n            reader.onload = function (event) {\r\n                $scope.AfterImage = event.target.result;\r\n                $scope.$apply();\r\n            }\r\n            reader.readAsDataURL(element.files[0]);\r\n        }\r\n\r\n        $scope.Save = function () {\r\n            var promises = [];\r\n            var promise = null;\r\n            if (!$scope.Validate()) {\r\n                return false;\r\n            }\r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                var details = [];\r\n                angular.forEach($scope.Detail, function (value, key) {\r\n                    details.push({\r\n                        Id: value.Id,\r\n                        Answer: value.Answer\r\n                    })\r\n                });\r\n                var item = { Header: $scope.Header, Details: details };\r\n                promise = SurveyHeaderService.UpdateBulk($scope.Header.Id, item).then(function(data){\r\n                    promises.push(promise);\r\n                    promise = ImageService.CreateBeforeImage($scope.Header.BeforeImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    promise = ImageService.CreateAfterImage($scope.Header.AfterImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    $q.all([promises]).then(function () {\r\n                        toastr.success(\"Save successful.\");\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                var details = [];\r\n                angular.forEach($scope.Detail, function (value, key) {\r\n                    details.push({\r\n                        CompanyId: $stateParams.companyId,\r\n                        ProductId: value.Product.Id,\r\n                        QuestionId: value.Question.Id,\r\n                        Answer: value.Answer\r\n                    })\r\n                });\r\n                var item = { Header: $scope.Header, Details: details };\r\n                promise = SurveyHeaderService.CreateBulk(item).then(function (data) {\r\n                    promise = ImageService.CreateBeforeImage($scope.Header.BeforeImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    promise = ImageService.CreateAfterImage($scope.Header.AfterImage, data.data.Id);\r\n                    promises.push(promise);\r\n                    $q.all([promises]).then(function () {\r\n                        toastr.success(\"Save successful.\");\r\n                        $state.go('survey', {\r\n                            companyId: $stateParams.companyId, surveyId: $stateParams.surveyId,\r\n                            customerId: $stateParams.customerId, locationId: $stateParams.locationId, surveyHeaderId: data.data.Id\r\n                        });\r\n                    });\r\n                });\r\n                promises.push(promise);  \r\n            }\r\n        }\r\n\r\n        $scope.Validate = function () {\r\n            var fileSizeBeforeImage = 0; var fileSizeAfterImage = 0;\r\n            if ($scope.Header.BeforeImage != null) {\r\n                var fileSizeBeforeImage = $scope.Header.BeforeImage.size; // in bytes\r\n            }\r\n            if ($scope.Header.AfterImage != null) {\r\n                var fileSizeAfterImage = $scope.Header.AfterImage.size; // in bytes\r\n            }\r\n            if (fileSizeBeforeImage > 3096000 || fileSizeAfterImage > 3096000) {\r\n                alert('File size is more then ' + 3 + ' Megabytes.');\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        $scope.DeleteBeforeImage = function () {\r\n            $scope.BeforeImage = null;\r\n            $scope.Header.BeforeImage = null; \r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                ImageService.DeleteBeforeImage($stateParams.surveyHeaderId).then(function () {\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n        $scope.DeleteAfterImage = function () {\r\n            $scope.AfterImage = null;\r\n            $scope.Header.AfterImage = null;\r\n            angular.element(document.querySelector('#AfterImage')).empty();\r\n            if ($stateParams.surveyHeaderId != undefined && $stateParams.surveyHeaderId != null && $stateParams.surveyHeaderId != \"\") {\r\n                ImageService.DeleteAfterImage($stateParams.surveyHeaderId).then(function () {\r\n\r\n                });\r\n            }\r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('surveydata', {\r\n            url: \"/surveydata/\",\r\n            templateUrl: \"/App/ApplicationComponents/DataEntry/SurveyData/MerchandiseSurveyData.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MerchandiseSurveyDataController', ['$scope', '$state', '$stateParams', '$http', '$location', '$timeout', 'uiGridConstants', 'breezeservice', 'breeze',\r\n        'CompanyService', 'LocationService', 'CustomerService', 'SurveyService',\r\n        'UserService', 'SurveyCustomerLocationService', 'SurveyProductQuestionService', 'CompanyApplicationService', 'SurveyHeaderService', 'SurveyDetailService',\r\n    function controller($scope, $state, $stateParams, $http, $location, $timeout, uiGridConstants, breezeservice, breeze,\r\n        CompanyService, LocationService, CustomerService, SurveyService,\r\n        UserService, SurveyCustomerLocationService, SurveyProductQuestionService, CompanyApplicationService, SurveyHeaderService, SurveyDetailService) {\r\n\r\n\r\n        $scope.grid = {\r\n            options: {\r\n                showGridFooter: true,\r\n                enableFiltering: true,\r\n                enableSorting: true,\r\n                headerTooltip: true,\r\n                onRegisterApi: function (gridApi) {\r\n                    $scope.gridApi = gridApi;\r\n                },\r\n                enableGridMenu: true,\r\n                exporterCsvFilename: 'data.csv',\r\n                exporterPdfOrientation: 'portrait',\r\n                exporterPdfPageSize: 'LETTER',\r\n                exporterPdfMaxGridWidth: 450,\r\n                data: null,\r\n                columnDefs: [\r\n                    { field: 'Id', displayName: '', width: '60', enableFiltering: false, enableSorting: false, cellTemplate: '<div><button class=\"btn btn-danger btn-sm\" ng-click=\"grid.appScope.vm.functions.data.delete(row.entity.Id)\">Delete</button></div>' },\r\n                    { field: 'Id', headerTooltip: true, displayName: 'Id' },\r\n                    //{ field: 'EmployeeId', cellTooltip: true, headerTooltip: true, displayName: 'Employee Id (unique)' },\r\n                    //{ field: 'FirstName', cellTooltip: true, headerTooltip: true, displayName: 'First Name' },\r\n                    //{ field: 'LastName', cellTooltip: true, headerTooltip: true, displayName: 'Last Name' },\r\n                    //{ field: 'ElectionPeriod', cellTooltip: true, headerTooltip: true, displayName: 'Election Period (unique)', cellTemplate: '<div class=\"ui-grid-cell-contents\">{{row.entity.ElectionPeriod | date: \"MM/dd/yyyy\"}}</div>' },\r\n                    //{ field: 'AmountDueDate', cellTooltip: true, headerTooltip: true, displayName: 'Amount Due Date', cellTemplate: '<div class=\"ui-grid-cell-contents\">{{row.entity.AmountDueDate | date: \"MM/dd/yyyy\"}}</div>' },\r\n                    //{ field: 'SharesVesting', cellTooltip: true, headerTooltip: true, displayName: 'Shares Vesting' },\r\n                    //{ field: 'IsViewed', cellTooltip: true, headerTooltip: true, displayName: 'Is Viewed' },\r\n                    //{ field: 'ElectionType', cellTooltip: true, headerTooltip: true, displayName: 'Election Type' },\r\n                    //{ field: 'Created', cellTooltip: true, headerTooltip: true, displayName: 'Created', cellTemplate: '<div class=\"ui-grid-cell-contents\">{{row.entity.Created | date: \"MM/dd/yyyy\"}}</div>' }\r\n                ]\r\n            }\r\n        }\r\n\r\n        $scope.Search = function () {\r\n            \r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('reportmain', {\r\n            url: \"/reportmain/:companyId/:surveyId/:customerId/:locationId/:surveyHeaderId\",\r\n            templateUrl: \"/App/ApplicationComponents/Report/Main/ReportMain.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('ReportMainController', ['$scope', '$state', '$stateParams', '$http', '$location',\r\n        '$timeout', 'breezeservice', 'breeze', 'ReportService','SurveyHeaderService',\r\n    function controller($scope, $state, $stateParams, $http, $location,\r\n        $timeout, breezeservice, breeze, ReportService, SurveyHeaderService) {\r\n        $scope.Search = function () {\r\n            if ($stateParams.customerId == \"\") { $stateParams.customerId = null }\r\n            if ($stateParams.locationId == \"\") { $stateParams.locationId = null }\r\n            ReportService.Search($stateParams.companyId, null, $stateParams.customerId, $stateParams.locationId, null, null, null, 0, 10000).then(function (data) {\r\n                $scope.gridOptions.data = data;\r\n                $scope.gridOptions.columnDefs.push({\r\n                    name: 'Manage', cellTemplate: '/App/ApplicationComponents/Report/Main/CellTemplates/EditDelete.html'\r\n                });\r\n                $scope.gridOptions.columnDefs.push({\r\n                    field: 'ProductName', name: 'Product Name', cellTooltip: true\r\n                });\r\n                $scope.gridOptions.columnDefs.push({\r\n                    field: 'SurveyName', name: 'Survey Name', cellTooltip: true\r\n                });\r\n                var keys = []\r\n                var obj = $scope.gridOptions.data[0];\r\n                for (var key in obj) {\r\n                    keys.push(key)\r\n                    if ((key != 'Created' && !key.includes(\"Id\") && !key.includes(\"Name\"))) {\r\n                        $scope.gridOptions.columnDefs.push({\r\n                            name: key, cellTooltip: true\r\n                        });\r\n                    }\r\n                }\r\n                $scope.gridOptions.columnDefs.push({\r\n                    name: 'Created', cellTooltip: true, cellTemplate: '<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{row.entity.Created | date: \"MM/dd/yyyy h:mm:ss a\": \"UTC\"}}</div>'\r\n                });\r\n            });\r\n        }\r\n        $scope.Search();\r\n\r\n        $scope.gridOptions = {\r\n            enableFiltering: true,\r\n            enableSorting: true,\r\n            enableGridMenu: true,\r\n            exporterCsvFilename: 'myFile.csv',\r\n            exporterPdfOrientation: 'portrait',\r\n            exporterPdfPageSize: 'LETTER',\r\n            exporterPdfMaxGridWidth: 500,\r\n            data: [],\r\n            columnDefs: [\r\n              //{ name: 'Id' },\r\n              //{ name: 'ProductName' },\r\n              //{ name: 'LocationName' },\r\n              //{ name: 'CustomerName' },\r\n              //{ name: 'Question' },\r\n              //{ name: 'Answer' },\r\n              //{ name: $scope.gridOptions.data[0] },\r\n              //{ name: 'Created', cellTemplate: '<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{row.entity.Created | date: \"MM/dd/yyyy h:mm:ss a\": \"UTC\"}}</div>' }\r\n              //{ name: 'cumulativeWidgets', field: 'widgets', cellTemplate: '<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{grid.appScope.cumulative(grid, row)}}</div>' }\r\n            ]\r\n        };\r\n\r\n        $scope.Edit = function (row) {\r\n            debugger;\r\n            $state.go('survey', {\r\n                companyId: row.CompanyId, surveyId: row.SurveyId,\r\n                customerId: row.CustomerId, locationId: row.LocationId, surveyHeaderId: row.Id\r\n            });\r\n        }\r\n\r\n        $scope.Delete = function(id){\r\n            SurveyHeaderService.DeleteBulk(id).then(function (data) {\r\n                var index = $scope.gridOptions.data.map(function (e) { return e.Id; }).indexOf(id);\r\n                debugger;\r\n                $scope.gridOptions.data.splice(index, 1);\r\n            }, function (error) {\r\n                toastr.error(\"There was an error deleting the survey data.\");\r\n            });\r\n        }\r\n\r\n        $scope.GoTo = function (state) {\r\n            $state.go(state, {\r\n                companyId: $stateParams.companyId, surveyId: $stateParams.surveyId,\r\n                customerId: $stateParams.customerId, locationId: $stateParams.locationId\r\n            });\r\n        }\r\n    }]);\r\n})(moment);","(function (moment) {\r\n    \"use strict\";\r\n    angular.module('Main').config(function ($stateProvider) {\r\n        $stateProvider\r\n        .state('map', {\r\n            url: \"/map/:companyId/:surveyId/:customerId/:locationId/:surveyHeaderId\",\r\n            templateUrl: \"/App/ApplicationComponents/Report/Map/Map.html\"\r\n        })\r\n    });\r\n    angular.module('Main').controller('MapController', ['$scope', '$state', '$stateParams', 'NgMap', '$http', '$location',\r\n        '$timeout', 'breezeservice', 'breeze', 'MapService','SurveyHeaderService',\r\n    function controller($scope, $state, $stateParams, NgMap, $http, $location,\r\n        $timeout, breezeservice, breeze, MapService, SurveyHeaderService) {\r\n        $scope.SelectedPosition = null;\r\n        $scope.Search = function () {\r\n            var p1 = new breeze.Predicate('CompanyId', '==', $stateParams.companyId);\r\n            var p2 = new breeze.Predicate('CustomerId', '==', $stateParams.customerId);\r\n            var p3 = new breeze.Predicate('LocationId', '==', $stateParams.locationId);\r\n            var p4 = new breeze.Predicate('SurveyId', '==', $stateParams.surveyId);\r\n            var predicate = new breeze.Predicate.and([p1, p2, p3, p4]);\r\n            MapService.Search(predicate, 0, 1000, false).then(function (data) {\r\n                $scope.positions = data;\r\n            });\r\n        }\r\n        NgMap.getMap().then(function (map) {\r\n            $scope.map = map;\r\n        });\r\n        $scope.Search();\r\n\r\n        $scope.SelectPosition = function (position) {\r\n            $scope.SelectedPosition = position;\r\n            $scope.map.panTo({ lat: $scope.SelectedPosition.Latitude, lng: $scope.SelectedPosition.Longitude });\r\n        }\r\n\r\n        $scope.SelectMarker = function (event, marker) {\r\n            $scope.SelectedPosition = marker;\r\n        }\r\n\r\n        $scope.GoTo = function (state) {\r\n            $state.go(state, {\r\n                companyId: $stateParams.companyId, surveyId: $stateParams.surveyId,\r\n                customerId: $stateParams.customerId, locationId: $stateParams.locationId\r\n            });\r\n        }\r\n    }]);\r\n})(moment);"],"sourceRoot":"/source/"}